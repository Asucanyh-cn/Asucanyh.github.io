<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小狼的学习笔记</title>
  
  <subtitle>LPtexas</subtitle>
  <link href="https://lptexas.top/atom.xml" rel="self"/>
  
  <link href="https://lptexas.top/"/>
  <updated>2024-10-04T09:02:08.826Z</updated>
  <id>https://lptexas.top/</id>
  
  <author>
    <name>Lptexas</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue2学习笔记Part3</title>
    <link href="https://lptexas.top/posts/1975607171/"/>
    <id>https://lptexas.top/posts/1975607171/</id>
    <published>2023-08-06T16:00:00.000Z</published>
    <updated>2024-10-04T09:02:08.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单页面应用程序"><a href="#单页面应用程序" class="headerlink" title="单页面应用程序"></a>单页面应用程序</h1><p>在一个web服务器上，只有一个web页面。</p><p>所有的功能都在这个页面上实现。</p><p>单页面应用是很复杂的。</p><h1 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a><a href="https://cli.vuejs.org/zh/">vue-cli</a></h1><p>用于开发vue的标准工具。简化了基于web-pack创建工程化vue项目的过程。</p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -g @vue/cli</span><br></pre></td></tr></table></figure><p>快速生成工程化的Vue项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 项目名称</span><br></pre></td></tr></table></figure><p><img src="https://lptexas-cub.github.io/img/post/image-20230807154634338.png" alt="image-20230807154634338"></p><p>使用上下箭头选择<code>预设</code>。</p><p>此处选择<code>Manually select features</code>，回车。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230807154839856.png" alt="image-20230807154839856"></p><p>使用<code>空格</code>勾选需要的功能。</p><ul><li>勾选<code>CSS Pre-processors</code>，可以方便使用<code>less书写css</code>。</li><li>建议取消勾选<code>Linter / Formatter</code>，这个是用于约束代码风格的。</li></ul><p><img src="https://lptexas-cub.github.io/img/post/image-20230807155515503.png" alt="image-20230807155515503"></p><p>选择Vue版本，选择<code>2.x</code>。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230807155745924.png" alt="image-20230807155745924"></p><p>选择css预处理器，选择<code>Less</code>。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230807155819776.png" alt="image-20230807155819776"></p><p>选择配置文件的存放方式（独立的或放在一起）。</p><p>选择默认的<code>In dedicated config files</code>，独立创建。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230807160026798.png" alt="image-20230807160026798"></p><p>是否保存当前这套预设。输入<code>y</code>，回车。</p><p>为当前预设设置名称，回车。</p><h2 id="vue项目的运行流程"><a href="#vue项目的运行流程" class="headerlink" title="vue项目的运行流程"></a>vue项目的运行流程</h2><p>通过<code>main.js</code>把<code>App.vue</code>渲染到<code>index.html页面</code>中。</p><h1 id="第一个Vue-js项目"><a href="#第一个Vue-js项目" class="headerlink" title="第一个Vue.js项目"></a>第一个Vue.js项目</h1><p>进入使用vue-cli创建的vue项目。</p><h2 id="vue项目的构成"><a href="#vue项目的构成" class="headerlink" title="vue项目的构成"></a>vue项目的构成</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">demo-first</span><br><span class="line">├── README.md</span><br><span class="line">├── babel.config.js</span><br><span class="line">├── jsconfig.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">├── src</span><br><span class="line">└── vue.config.js</span><br></pre></td></tr></table></figure><blockquote><p>src目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── App.vue</span><br><span class="line">├── assets #用于存放静态资源</span><br><span class="line">│   └── logo.png</span><br><span class="line">├── components #用于存放组件文件</span><br><span class="line">│   └── HelloWorld.vue</span><br><span class="line">└── main.js #项目的入口文件</span><br></pre></td></tr></table></figure><h1 id="Vue入口文件"><a href="#Vue入口文件" class="headerlink" title="Vue入口文件"></a>Vue入口文件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入vue包，用于创建vue对象。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入组件，用于调用和渲染。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//创建Vue对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">//将render函数指定的组件渲染到HTML页面。</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：$mount()等价于el</span></span><br></pre></td></tr></table></figure><p>组件中的内容，会替换掉HTML中，Vue所绑定的作用域标签。</p><p>换句话说，“&lt;div id&#x3D;“app”&gt;&lt;&#x2F;div&gt;”相当于是一个占位符。</p><h1 id="Vue组件化开发"><a href="#Vue组件化开发" class="headerlink" title="Vue组件化开发"></a>Vue组件化开发</h1><p>组件文件的后缀名为<code>.vue</code>。</p><p>vue组件的三个组成部分：</p><ul><li><code>templete</code>组件的模板结构</li><li><code>script</code>组件的javascript行为</li><li><code>style</code>组件的样式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line">//默认导出。</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;,</span><br><span class="line">    //data节点，在组件中定义方式改变了，必须是函数形式，并返回 &#123;&#125;。</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            //在此处定义数据</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            printThis()&#123;</span><br><span class="line">                console.log(this); //组件中的this，不再指向vue实例，而是指向组件实例。</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">         watch:&#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;,</span><br><span class="line">         computed:&#123;</span><br><span class="line">             ...</span><br><span class="line">         &#125;,</span><br><span class="line">         filters:&#123;</span><br><span class="line">             ...</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!--&gt; lang属性用于启用css预处理器&lt;--&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot;&gt; </span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="组件之间的关系"><a href="#组件之间的关系" class="headerlink" title="组件之间的关系"></a>组件之间的关系</h2><p><img src="https://lptexas-cub.github.io/img/post/image-20230808140859094.png" alt="image-20230808140859094"></p><h3 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h3><p>组件在<code>使用</code>时，会产生父子关系。谁调用谁，谁是谁的父亲。</p><blockquote><p>A调用B和C，所以A是B、C的父亲。</p></blockquote><h3 id="兄弟关系"><a href="#兄弟关系" class="headerlink" title="兄弟关系"></a>兄弟关系</h3><h3 id="后代关系"><a href="#后代关系" class="headerlink" title="后代关系"></a>后代关系</h3><h2 id="组件的使用方式"><a href="#组件的使用方式" class="headerlink" title="组件的使用方式"></a>组件的使用方式</h2><ol><li>使用<code>import 组件名 from 组件位置</code>导入组件。</li><li>在<code>components节点</code>注册组件。</li><li>以标签的形式使用导入的组件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;templete&gt;</span><br><span class="line">    &lt;组件名&gt;&lt;/组件名&gt;</span><br><span class="line">&lt;/templete&gt;</span><br></pre></td></tr></table></figure><h2 id="全局组件与私有组件"><a href="#全局组件与私有组件" class="headerlink" title="全局组件与私有组件"></a>全局组件与私有组件</h2><p>在<code>components节点</code>中注册的主键为私有组件。</p><hr><p>在<code>main.js入口文件</code>中，通过<code>Vue.component()方法</code>将组件注册为全局组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 全局组件 <span class="keyword">from</span> 路径</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;组件名称&#x27;</span>,全局组件)</span><br></pre></td></tr></table></figure><h2 id="组件的自定义属性"><a href="#组件的自定义属性" class="headerlink" title="组件的自定义属性"></a>组件的自定义属性</h2><p>用于声明自定义属性props。</p><p>允许使用者通过自定义属性，为当前组件指定初始值。</p><blockquote><p>创建props组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;props: init=&#123;&#123; init &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props:[&#x27;init&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用数组的形式定义props"><a href="#使用数组的形式定义props" class="headerlink" title="使用数组的形式定义props"></a>使用数组的形式定义props</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;left&quot;&gt;</span><br><span class="line">    我是左组件</span><br><span class="line">    &lt;Props init=&quot;15&quot;&gt;&lt;/Props&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.left &#123;</span><br><span class="line">  border: 1px solid;    </span><br><span class="line">  float: left;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>!!! info Props赋数值的快捷方法<br>   使用<code>v-bind:</code>或<code>:</code>来绑定自定义属性。</p><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Props :init=&quot;15&quot;&gt;&lt;/Props&gt;</span><br></pre></td></tr></table></figure></code></pre><p>​    这样操作，<code>15</code>就是数值型数据了，不再是字符型。</p><h3 id="使用对象形式定义props"><a href="#使用对象形式定义props" class="headerlink" title="使用对象形式定义props"></a>使用对象形式定义props</h3><blockquote><p>设置<code>默认值</code>，使用<code>default节点</code>。</p><p>检查<code>值类型</code>，使用<code>type节点</code>。</p><p>设置<code>Props为必填</code>，使用<code>required节点</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;props: init=&#123;&#123; init &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props:&#123;</span><br><span class="line">      init:&#123;  //使用对象形式定义props。</span><br><span class="line">          default:0 ,//设置默认值。</span><br><span class="line">          type:Number ,// [Number|String|Object]，检查数据类型。</span><br><span class="line">        required:true //bool，设置该属性是否为必填。</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>!!! warning 自定义属性是只读的<br>   自定义属性值不能被直接修改，Vue会报错，建议将属性转储到<code>data节点</code>。</p><h3 id="Props的意义"><a href="#Props的意义" class="headerlink" title="Props的意义"></a>Props的意义</h3><p>提高组件的复用性。</p><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a><a href="https://v2.cn.vuejs.org/v2/guide/components-custom-events.html#ad">组件的自定义事件</a></h2><p>在组件中，使用<code>$emit()方法</code>触发自定义事件。</p><p>这个事件能够被父组件监听。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&quot;事件名&quot;,参数1,参数2,...);</span><br></pre></td></tr></table></figure><blockquote><p>父组件监听子组件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-on:事件名=&quot;处理函数&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">事件命名规则建议</p><p>推荐使用<code>烤串命名法</code>，不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以没有必要使用<code>驼峰命名法</code>和<code>首字母大写命名法</code>。并且 <code>v-on</code> 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到。</p></div><h2 id="组件样式冲突"><a href="#组件样式冲突" class="headerlink" title="组件样式冲突"></a>组件样式冲突</h2><p>理想情况下，组件中的样式应该只作用在本组件中。</p><p>实际上，组件中的样式会影响所有的组件。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>实现原理</strong>：在所有本组件使用的标签中，添加自定义属性，然后在样式中结合属性选择器<code>选择器[自定义属性]</code>进行样式设计。</p><p><strong>Vue的方案</strong>：在style标签上添加一个<code>scoped自定义属性</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>scoped有一个缺点，无法在父组件中修改子组件。</p><p>这时就需要使用<code>/deep/</code>。</p><p>常常会用在使用第三方组件库，需要修改样式的时候。</p></blockquote><p><strong>实现原理</strong>：将原本的属性选择器与后代选择器结合。<code>选择器[自定义属性]</code>变为 <code>[自定义属性] 选择器</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&#x27;less&#x27; scoped&gt;</span><br><span class="line">    /deep/选择器&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue组件的实例对象"><a href="#Vue组件的实例对象" class="headerlink" title="Vue组件的实例对象"></a>Vue组件的实例对象</h2><p>在组件中使用组件，可以理解成创建实例的过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;组件&gt;&lt;/组件&gt; //创建了一个组件实例对象</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="组件的生命周期和生命周期函数"><a href="#组件的生命周期和生命周期函数" class="headerlink" title="组件的生命周期和生命周期函数"></a><a href="https://cn.vuejs.org/api/options-lifecycle">组件的生命周期和生命周期函数</a></h2><p>组件的生命周期是指一个组件从创建、运行、销毁的整个过程，强调的是一个时间段。</p><p>生命周期函数是指在某个生命周期的时间点执行的函数，强调的是一个时间点。</p><h4 id="组件创建前"><a href="#组件创建前" class="headerlink" title="组件创建前"></a>组件创建前</h4><blockquote><p>beforeCreate()</p></blockquote><p>当前的props、data、methods节点都未被创建。</p><p>访问不了数据，也调用不了方法。</p><h4 id="组件创建后-lt-重要-gt"><a href="#组件创建后-lt-重要-gt" class="headerlink" title="组件创建后&lt;!重要&gt;"></a>组件创建后&lt;!重要&gt;</h4><blockquote><p>created()</p></blockquote><p>props、data、methods节点已初始化完毕。</p><p>但是，组件的模板结构还未生成，不能操作DOM树。</p><div class="admonition info"><p class="admonition-title">发起请求</p><p>一般情况，在created()阶段发起网络请求获取数据。</p></div><h4 id="组件渲染到页面之前"><a href="#组件渲染到页面之前" class="headerlink" title="组件渲染到页面之前"></a>组件渲染到页面之前</h4><blockquote><p>beforeMount()</p></blockquote><p>该阶段将内存中编译好的HTML结构渲染到浏览器，但在这个阶段DOM树还未被创建，因此不能操作DOM结构。</p><h4 id="组件渲染到页面之后"><a href="#组件渲染到页面之后" class="headerlink" title="组件渲染到页面之后"></a>组件渲染到页面之后</h4><blockquote><p>mounted()</p></blockquote><p>该阶段已经将内存中的HTML结构，渲染到了浏览器中。此时浏览器已经创建好了组件的DOM结构。</p><h4 id="组件数据更新前"><a href="#组件数据更新前" class="headerlink" title="组件数据更新前"></a>组件数据更新前</h4><blockquote><p>beforeUpdate()</p></blockquote><p>该阶段在数据发生改变，但还未开始重新渲染。</p><p>在这个阶段，可以获取到渲染之前的旧数据。</p><h4 id="组件数据更新后"><a href="#组件数据更新后" class="headerlink" title="组件数据更新后"></a>组件数据更新后</h4><blockquote><p>updated()</p></blockquote><p>该阶段，已经根据数据重新渲染了页面，数据和结构都是最新的。</p><p>操作DOM的操作应该在这个阶段进行。</p><h4 id="组件销毁前"><a href="#组件销毁前" class="headerlink" title="组件销毁前"></a>组件销毁前</h4><blockquote><p>beforeDestory</p></blockquote><p><code>v-if命令</code>可以控制组件的创建和销毁。</p><h4 id="组件销毁后"><a href="#组件销毁后" class="headerlink" title="组件销毁后"></a>组件销毁后</h4><blockquote><p>destoryed</p></blockquote><p><img src="https://lptexas-cub.github.io/img/post/lifecycle.png"></p><h2 id="组件间的数据共享"><a href="#组件间的数据共享" class="headerlink" title="组件间的数据共享"></a>组件间的数据共享</h2><blockquote><p>结合<code>组件之间的关系</code>树形图。</p></blockquote><h3 id="父组件向子组件"><a href="#父组件向子组件" class="headerlink" title="父组件向子组件"></a>父组件向子组件</h3><p>使用<code>自定义属性Props</code>。</p><h3 id="子组件向父组件"><a href="#子组件向父组件" class="headerlink" title="子组件向父组件"></a>子组件向父组件</h3><p>使用<code>自定义事件$emit()</code>。</p><h3 id="兄弟组件相互传递"><a href="#兄弟组件相互传递" class="headerlink" title="兄弟组件相互传递"></a>兄弟组件相互传递</h3><p>使用<code>EventBus方案</code>。</p><ol><li>创建<code>eventBus.js文件</code>。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><ol start="2"><li>在兄弟组件中导入<code>eventBus.js文件</code>。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span></span><br><span class="line"><span class="comment">//发送数据方</span></span><br><span class="line">bus.$emit(<span class="string">&#x27;事件&#x27;</span>,参数)</span><br><span class="line"><span class="comment">//接收数据方</span></span><br><span class="line">bus.$on(<span class="string">&#x27;事件&#x27;</span>,事件处理函数)</span><br></pre></td></tr></table></figure><h2 id="ref引用"><a href="#ref引用" class="headerlink" title="ref引用"></a>ref引用</h2><p>jQurey简化了程序员操作DOM的过程，但不建议在vue中使用。</p><p>在vue中，程序员几乎不再需要操作DOM，只需要维护数据。</p><p>在少数情况下，ref用于方便程序员在vue中操作<code>DOM树</code>以及<code>子组件</code>。</p><hr><h3 id="vue组件实例的-refs属性。"><a href="#vue组件实例的-refs属性。" class="headerlink" title="vue组件实例的$refs属性。"></a>vue组件实例的<code>$refs属性</code>。</h3><blockquote><p>ref引用的使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p ref=&quot;DOM引用名1&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;组件 ref=&quot;DOM引用名2&quot;&gt;&lt;/组件&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">DOM</span>引用名<span class="number">1.</span><span class="variable constant_">DOM</span>操作</span><br><span class="line"><span class="comment">//this.$refs.DOM引用名1.style.color=yellow;</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">ref值的唯一性</p><p>ref的值不能重复。</p></div><h3 id="vue组件实例的-nextTick-cb-属性"><a href="#vue组件实例的-nextTick-cb-属性" class="headerlink" title="vue组件实例的$nextTick(cb)属性"></a>vue组件实例的<code>$nextTick(cb)属性</code></h3><p>当页面完全渲染完毕后，在执行回调。</p><blockquote><p>以下代码，会报undefined错误。</p></blockquote><p>原因是：flag值发生变化后，立即执行了操作DOM的代码，但此时页面还未完全渲染完毕。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-if=&quot;flag&quot; type=&quot;text&quot; ref=&quot;inputRef&quot;/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">flag</span>=<span class="literal">true</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputRef</span>.<span class="title function_">focus</span>()</span><br></pre></td></tr></table></figure><p>解决方法：使用<code>$nextTick(cb)属性</code>，在页面完全渲染完毕后执行回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">flag</span>=<span class="literal">true</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inputRef</span>.<span class="title function_">focus</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue2学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Vue" scheme="https://lptexas.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>在手机上使用MAA一键长草</title>
    <link href="https://lptexas.top/posts/2031351995/"/>
    <id>https://lptexas.top/posts/2031351995/</id>
    <published>2023-08-06T16:00:00.000Z</published>
    <updated>2024-10-04T08:16:42.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><p>在手机中搭建Linux虚拟机，在虚拟机中下载Maa，然后解压配置启动。</p><blockquote><p>Linux虚拟机方案</p></blockquote><ol><li>使用linux deploy<code>（需要ROOT）</code></li></ol><p>这是我目前使用的方案，也是本文主要演示的方案。</p><p><code>linux deploy</code>可以配置开机启动自启脚本，十分方便，推荐使用。</p><ol start="2"><li>使用Termux安装Linux</li></ol><p>建议还是安装一下Termux，用来作为SSH访问的终端也不错。</p><p><a href="https://blog.csdn.net/qq_42471423/article/details/90582792">Termux相关配置。</a></p><hr><p>Termux安装Linux 来自互联网的方案：</p><ul><li><a href="https://blog.csdn.net/qq_52464882/article/details/120711928#:~:text=1%20termux%E5%AE%89%E8%A3%85linux%E5%87%86%E5%A4%87%EF%BC%88%E6%8D%A2%E6%BA%90%EF%BC%89%EF%BC%9A%202%20uname%20-m%20%E6%9F%A5%E7%9C%8B%E6%89%8B%E6%9C%BA%E6%9E%B6%E6%9E%84%20uname%20-a,%E5%8F%AF%E4%BB%A5%E5%9C%A8deb%E5%90%8E%E9%9D%A2%E5%8A%A0%E4%B8%8A%20%5Barch%3Dall%2C%E6%89%8B%E6%9C%BA%E6%9E%B6%E6%9E%84%5D%203%20%E9%95%9C%E5%83%8F%E6%BA%90%E5%B8%AE%E5%8A%A9%EF%BC%9A%204%203.1%E9%80%9A%E8%BF%87python%26%26git%E5%B7%A5%E5%85%B7%E4%B8%8B%E8%BD%BD%205%203.2%E9%80%9A%E8%BF%87wegt%26%26git%E5%AE%89%E8%A3%85">智能手机安装Termux及安装Linux系统及其桌面环境超详细教程</a></li></ul><h1 id="虚拟机搭建"><a href="#虚拟机搭建" class="headerlink" title="虚拟机搭建"></a>虚拟机搭建</h1><h2 id="linux-deploy安装及配置"><a href="#linux-deploy安装及配置" class="headerlink" title="linux deploy安装及配置"></a>linux deploy安装及配置</h2><ul><li>官网 Github <a href="https://github.com/meefik/linuxdeploy/releases/tag/2.6.0">Linux Deploy 2.6.0</a> <a href="https://github.com/meefik/linuxdeploy/releases/latest">Latest</a></li></ul><p>下载完毕后，打开APP，并允许<code>Root权限</code>。</p><p>点击<code>右下角</code>的选项，进行配置。建议进行如下配置：</p><ul><li><p><code>发行版 GNU/Linux </code>选择 <code>Ubuntu</code></p></li><li><p><code>架构</code>选择<code>arm64</code></p></li><li><p><code>发行版本 GNU/Linux 版本</code>选择<code>kinketic</code></p></li><li><p><code>源地址</code>改为<code>http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports</code></p></li><li><p><code>安装类型</code>选择<code>目录</code></p></li><li><p><code>本地化</code>选择<code>zh_CN.UTF-8</code></p></li><li><p><code>初始化系统</code>可用于开机执行脚本，建议使用<code>run-parts</code></p></li><li><p><code>SSH</code>选择<code>启用</code>。具体配置根据个人而定，此处选择默认。</p></li><li><p>其它配置，详情见官方文档。</p></li></ul><p>配置完毕后，回到首页，点击右上角，选择<code>安装</code>。等待安装结束，结果如下图。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://lptexas-cub.github.io/img/post/Screenshot_20230807-153235_Linux_Deploy.png" alt="Screenshot_20230807-153235_Linux_Deploy"></h2><p>安装完毕后，点击首页的<code>启动</code>。</p><p>启动完毕后，使用Termux或者其它ssh工具连接Linux。命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh android@这里填APP上面写的IP地址 </span><br></pre></td></tr></table></figure><h2 id="安装Termux"><a href="#安装Termux" class="headerlink" title="安装Termux"></a>安装Termux</h2><ul><li><a href="https://termux.dev/cn/">官网</a></li><li>Github <a href="https://github.com/termux/termux-app/releases/latest">v0.118.0 Latest</a></li></ul><h1 id="MAA安装及配置"><a href="#MAA安装及配置" class="headerlink" title="MAA安装及配置"></a>MAA安装及配置</h1><ul><li><a href="https://maa.plus/">官网</a></li><li>Github <a href="https://github.com/MaaAssistantArknights/MaaAssistantArknights/releases/latest">v4.21.0 Latest</a></li></ul><h2 id="安装MAA"><a href="#安装MAA" class="headerlink" title="安装MAA"></a>安装MAA</h2><p>配置完Linux系统后，使用Termux SSH连接我们创建好的</p><p>选择<code>aarch64架构</code>的版本。</p><p>此处以<code>MAA-v4.21.0-linux-aarch64.tar.gz</code>作演示。</p><p>新建<code>MAA文件夹</code>，下载压缩文件后解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wget -y</span><br><span class="line">mkdir MAA</span><br><span class="line">cd MAA</span><br><span class="line">wget https://github.com/MaaAssistantArknights/MaaAssistantArknights/releases/download/v4.21.0/MAA-v4.21.0-linux-aarch64.tar.gz</span><br><span class="line">tar -zxvf MAA-v4.21.0-linux-aarch64.tar.gz</span><br></pre></td></tr></table></figure><p>解压完毕后，进入解压后的文件目录。</p><p>进入<code>Python目录</code>，编辑<code>sample.py文件</code>，该文件为程序的主入口文件。</p><p>下面为配置好的文件，复制可以直接使用，更多配置请参考：<a href="https://maa.plus/docs/3.1-%E9%9B%86%E6%88%90%E6%96%87%E6%A1%A3.html"><code>/docs/3.1-集成文档.html</code></a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> asst.asst <span class="keyword">import</span> Asst</span><br><span class="line"><span class="keyword">from</span> asst.utils <span class="keyword">import</span> Message, Version, InstanceOptionType</span><br><span class="line"><span class="keyword">from</span> asst.updater <span class="keyword">import</span> Updater</span><br><span class="line"><span class="keyword">from</span> asst.emulator <span class="keyword">import</span> Bluestacks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Asst.CallBackType</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_callback</span>(<span class="params">msg, details, arg</span>):</span><br><span class="line">    m = Message(msg)</span><br><span class="line">    d = json.loads(details.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(m, d, arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请设置为存放 dll 文件及资源的路径</span></span><br><span class="line">    path = pathlib.Path(__file__).parent.parent</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置更新器的路径和目标版本并更新</span></span><br><span class="line">   <span class="comment"># Updater(path, Version.Stable).update()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 外服需要再额外传入增量资源路径，例如</span></span><br><span class="line">    <span class="comment"># incremental_path=path / &#x27;resource&#x27; / &#x27;global&#x27; / &#x27;YoStarEN&#x27;</span></span><br><span class="line">    Asst.load(path=path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若需要获取详细执行信息，请传入 callback 参数</span></span><br><span class="line">    <span class="comment"># 例如 asst = Asst(callback=my_callback)</span></span><br><span class="line">    asst = Asst()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置额外配置</span></span><br><span class="line">    <span class="comment"># 触控方案配置</span></span><br><span class="line">    asst.set_instance_option(InstanceOptionType.touch_type, <span class="string">&#x27;maatouch&#x27;</span>)</span><br><span class="line">    <span class="comment"># 暂停下干员</span></span><br><span class="line">    <span class="comment"># asst.set_instance_option(InstanceOptionType.deployment_with_pause, &#x27;1&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动模拟器。例如启动蓝叠模拟器的多开Pie64_1，并等待30s</span></span><br><span class="line">    <span class="comment"># Bluestacks.launch_emulator_win(r&#x27;C:\Program Files\BlueStacks_nxt\HD-Player.exe&#x27;, 30, &quot;Pie64_1&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取Hyper-v蓝叠的adb port</span></span><br><span class="line">    <span class="comment"># port = Bluestacks.get_hyperv_port(r&quot;C:\ProgramData\BlueStacks_nxt\bluestacks.conf&quot;, &quot;Pie64_1&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请自行配置 adb 环境变量，或修改为 adb 可执行程序的路径</span></span><br><span class="line">    <span class="keyword">if</span> asst.connect(<span class="string">&#x27;/usr/bin/adb&#x27;</span>, <span class="string">&#x27;127.0.0.1:5555&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;连接成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;连接失败&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务及参数请参考 docs/集成文档.md</span></span><br><span class="line"></span><br><span class="line">    asst.append_task(<span class="string">&#x27;StartUp&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&quot;client_type&quot;</span>:<span class="string">&quot;Official&quot;</span>,</span><br><span class="line">        <span class="string">&quot;start_game_enabled&quot;</span>:<span class="literal">True</span></span><br><span class="line">        &#125;)</span><br><span class="line">    asst.append_task(<span class="string">&#x27;Recruit&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;select&#x27;</span>: [<span class="number">4</span>],</span><br><span class="line">        <span class="string">&#x27;confirm&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        <span class="string">&#x27;times&#x27;</span>: <span class="number">4</span></span><br><span class="line">    &#125;)</span><br><span class="line">    asst.append_task(<span class="string">&#x27;Infrast&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;facility&#x27;</span>: [</span><br><span class="line">            <span class="string">&quot;Mfg&quot;</span>, <span class="string">&quot;Trade&quot;</span>, <span class="string">&quot;Control&quot;</span>, <span class="string">&quot;Power&quot;</span>, <span class="string">&quot;Reception&quot;</span>, <span class="string">&quot;Office&quot;</span>, <span class="string">&quot;Dorm&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;drones&#x27;</span>: <span class="string">&quot;Money&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    asst.append_task(<span class="string">&#x27;Visit&#x27;</span>)</span><br><span class="line">    asst.append_task(<span class="string">&#x27;Mall&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;shopping&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;buy_first&#x27;</span>: [<span class="string">&#x27;招聘许可&#x27;</span>, <span class="string">&#x27;龙门币&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;blacklist&#x27;</span>: [<span class="string">&#x27;家具&#x27;</span>, <span class="string">&#x27;碳&#x27;</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">    asst.append_task(<span class="string">&#x27;Fight&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;stage&#x27;</span>: <span class="string">&#x27;1-7&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;report_to_penguin&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;client_type&quot;</span>: <span class="string">&quot;Official&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    asst.append_task(<span class="string">&#x27;Award&#x27;</span>)</span><br><span class="line">    <span class="comment"># asst.append_task(&#x27;Copilot&#x27;, &#123;</span></span><br><span class="line">    <span class="comment">#     &#x27;filename&#x27;: &#x27;./GA-EX8-raid.json&#x27;,</span></span><br><span class="line">    <span class="comment">#     &#x27;formation&#x27;: False</span></span><br><span class="line">    <span class="comment"># &#125;)</span></span><br><span class="line">    asst.append_task(<span class="string">&#x27;Roguelike&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&quot;enable&quot;</span>:<span class="literal">True</span>, </span><br><span class="line">        <span class="string">&quot;theme&quot;</span>: <span class="string">&quot;Sami&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mode&quot;</span>:<span class="number">0</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment"># asst.append_task(&#x27;Custom&#x27;, &#123;&quot;task_names&quot;: [&quot;AwardBegin&quot;]&#125;)</span></span><br><span class="line">    asst.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> asst.running():</span><br><span class="line">        time.sleep(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="关闭和开启版本更新检查"><a href="#关闭和开启版本更新检查" class="headerlink" title="关闭和开启版本更新检查"></a>关闭和开启版本更新检查</h3><p>编辑<code>sample.py文件</code>，使用井号<code>#</code>注释掉下面这句代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置更新器的路径和目标版本并更新</span></span><br><span class="line"> Updater(path, Version.Stable).update()</span><br></pre></td></tr></table></figure><blockquote><p>上面的文件<code>默认已经关闭了版本更新</code>。</p></blockquote><h2 id="启动MAA"><a href="#启动MAA" class="headerlink" title="启动MAA"></a>启动MAA</h2><p>完成所有配置后，只需要使用<code>python3 sample.py</code>启动即可。</p><p>需要切换到<code>sample.py文件</code>所在目录进行执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果没有python3就安装一下</span></span><br><span class="line">apt install python3 -y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sample.py</span><br></pre></td></tr></table></figure><h2 id="终止任务"><a href="#终止任务" class="headerlink" title="终止任务"></a>终止任务</h2><p>使用组合键<code>CTRL+C</code>。</p>]]></content>
    
    
    <summary type="html">MAA小工具。</summary>
    
    
    
    <category term="游戏工具" scheme="https://lptexas.top/categories/%E6%B8%B8%E6%88%8F%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="明日方舟" scheme="https://lptexas.top/tags/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue2学习笔记Part2</title>
    <link href="https://lptexas.top/posts/46558997/"/>
    <id>https://lptexas.top/posts/46558997/</id>
    <published>2023-08-05T16:00:00.000Z</published>
    <updated>2024-10-04T09:02:03.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤器-lt-不再适用vue3-gt"><a href="#过滤器-lt-不再适用vue3-gt" class="headerlink" title="过滤器&lt;!不再适用vue3&gt;"></a>过滤器&lt;!不再适用vue3&gt;</h1><p><code>filter</code>用于文本格式化。</p><p>用在<code>插值表达式</code>和<code>v-bind属性绑定</code>。</p><p>类似<code>管道符</code>的使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message|msgFilter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在管道符<code>|</code>后，指定一个<code>过滤器函数</code>，<code>message</code>作为参数传入函数，函数<code>必须返回</code>处理后的<code>结果</code>。</p><p><code>msgFilter函数</code>可在<code>filters节点</code>中进行定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&quot;我是测试信息。&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filters</span>: &#123;</span><br><span class="line">        <span class="title function_">msgFilter</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> msg+<span class="string">&quot;(过滤后)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="私有过滤器和全局过滤器"><a href="#私有过滤器和全局过滤器" class="headerlink" title="私有过滤器和全局过滤器"></a>私有过滤器和全局过滤器</h2><p>在<code>filters节点</code>中定义的过滤器，均为<code>私有过滤器</code>。私有过滤器仅作用于<code>el节点</code>绑定的作用域中。</p><hr><p>声明一个全局过滤器的语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;过滤器名&#x27;</span>,<span class="function">(<span class="params">参数</span>)=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局过滤器作用于<code>所有vm实例</code>绑定的作用域中。</p><hr><div class="admonition info"><p class="admonition-title">过滤器重名处理方式</p><p>根据<code>就近原则</code>，若全局处理器与私有处理器重名，则私有处理器生效。</p></div><h2 id="过滤器传参"><a href="#过滤器传参" class="headerlink" title="过滤器传参"></a>过滤器传参</h2><p>过滤器函数的<code>第一个参数已固定</code>，参数从第二个参数开始传递。</p><blockquote><p>传参方式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message|msgFilter(arg1,arg2,...)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>函数定义方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;过滤器名&#x27;</span>,<span class="function">(<span class="params">固定参数,arg1,arg2,...</span>)=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h1><p><code>watch</code>用于<code>监视数据变化</code>，然后做出相应的动作。</p><p>在watch节点中定义函数，函数名为<code>data节点</code>中对于的数据名，函数的参数分别为<code>新值</code>和<code>旧值</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//02 创建vue实例对象</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// el:用于指定控制域，值为css选择器。</span></span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// data:用于设置数据。</span></span><br><span class="line">    <span class="attr">data</span>: &#123; </span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="title function_">username</span>(<span class="params">newV, oldV</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newV != oldV)</span><br><span class="line">                $.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8080/api/isExists&quot;</span>, &#123;</span><br><span class="line">                    <span class="attr">userName</span>: <span class="variable language_">this</span>.<span class="property">username</span></span><br><span class="line">                &#125;,</span><br><span class="line">                    <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">1</span>)</span><br><span class="line">                            $(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                        <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">0</span>)</span><br><span class="line">                            $(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="方法与对象侦听器"><a href="#方法与对象侦听器" class="headerlink" title="方法与对象侦听器"></a>方法与对象侦听器</h2><p><code>方法形式的侦听器</code>语法如上文所示。在<code>watch节点</code>直接定义方法，方法名对应要监听的数据名。</p><hr><p><code>对象形式的侦听器</code>，在<code>watch节点</code>定义侦听器对象，然后在对象中定义<code>handle方法</code>，以及<code>immediate属性</code>。</p><ul><li><code>immediate属性</code>，值为<code>bool型</code>，能够时侦听器在页面渲染完毕后自动执行一次再监视数据变化。</li><li><code>deep属性</code>，值为<code>bool型</code>，开启深度监听，能够监听对象中属性值的变化。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//02 创建vue实例对象</span></span><br><span class="line">       <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">           <span class="comment">// el:用于指定控制域，值为css选择器。</span></span><br><span class="line">           <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">           <span class="comment">// data:用于设置数据。</span></span><br><span class="line">           <span class="attr">data</span>: &#123;</span><br><span class="line">               <span class="attr">username</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">               <span class="attr">username2</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">               <span class="attr">info</span>: &#123;</span><br><span class="line">                   <span class="attr">username3</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">watch</span>: &#123;</span><br><span class="line">               <span class="comment">//方法侦听器</span></span><br><span class="line">               <span class="title function_">username</span>(<span class="params">newV, oldV</span>) &#123;</span><br><span class="line">                   $.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8080/api/isExists&quot;</span>, &#123;</span><br><span class="line">                       <span class="attr">userName</span>: <span class="variable language_">this</span>.<span class="property">username</span></span><br><span class="line">                   &#125;,</span><br><span class="line">                       <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                           <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">1</span>)</span><br><span class="line">                               $(<span class="string">&#x27;#lb1&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                           <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">0</span>)</span><br><span class="line">                               $(<span class="string">&#x27;#lb1&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                       &#125;)</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//对象侦听器（immediate）</span></span><br><span class="line">               <span class="attr">username2</span>: &#123;</span><br><span class="line">                   <span class="title function_">handler</span>(<span class="params">newV, oldV</span>) &#123;</span><br><span class="line">                       $.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8080/api/isExists&quot;</span>, &#123;</span><br><span class="line">                           <span class="attr">userName</span>: <span class="variable language_">this</span>.<span class="property">username</span></span><br><span class="line">                       &#125;,</span><br><span class="line">                           <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                               <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">1</span>)</span><br><span class="line">                                   $(<span class="string">&#x27;#lb2&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                               <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">0</span>)</span><br><span class="line">                                   $(<span class="string">&#x27;#lb2&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                           &#125;)</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//对象侦听器（deep）</span></span><br><span class="line">               <span class="attr">info</span>: &#123;</span><br><span class="line">                   <span class="title function_">handler</span>(<span class="params">newV, oldV</span>) &#123;</span><br><span class="line">                       $.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8080/api/isExists&quot;</span>, &#123;</span><br><span class="line">                           <span class="attr">userName</span>: <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">username3</span></span><br><span class="line">                       &#125;,</span><br><span class="line">                           <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                               <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">1</span>)</span><br><span class="line">                                   $(<span class="string">&#x27;#lb3&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                               <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">0</span>)</span><br><span class="line">                                   $(<span class="string">&#x27;#lb3&#x27;</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">                           &#125;)</span><br><span class="line">                   &#125;,</span><br><span class="line">                   <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">                   <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><div class="admonition info"><p class="admonition-title">对象子属性侦听的简写</p><p>类似普通数据监听方法的书写，但要使用<code>单引号</code>。如：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'info.username3'</span>(newV, oldV) {</span><br><span class="line">    $.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8080/api/isExists&quot;</span>, {</span><br><span class="line">        <span class="attr">userName</span>: <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">username3</span></span><br><span class="line">    },</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">res</span>) {</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">1</span>)</span><br><span class="line">                $(<span class="string">'#lb3'</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">0</span>)</span><br><span class="line">                $(<span class="string">'#lb3'</span>).<span class="title function_">html</span>(res.<span class="property">msg</span>)</span><br><span class="line">        })</span><br><span class="line">},</span><br></pre></td></tr></table></figure></p></div><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><table><thead><tr><th></th><th>方法侦听器</th><th>对象侦听器</th></tr></thead><tbody><tr><td>监听普通数据</td><td>√</td><td>√</td></tr><tr><td>监听对象属性</td><td>×</td><td>√</td></tr><tr><td>立即执行一次</td><td>×</td><td>√</td></tr></tbody></table><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>计算属性是<code>通过一系列运算</code>得到属性值的属性。</p><p>计算属性定义在<code>computed节点</code>中，并以<code>方法</code>的形式定义，方法必须有返回值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 01 设置vue的控制域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>RGB<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;r&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;g&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;background:rgb&#125;&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;rgb&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 创建vue实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el:用于指定控制域，值为css选择器。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data:用于设置数据。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">r</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">g</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">b</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">rgb</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">`RGB(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a><a href="http://www.axios-js.com/zh-cn/docs/#%E4%BB%80%E4%B9%88%E6%98%AF-axios%EF%BC%9F">axios</a></h1><p>用于网络请求，获取网络数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8080/api/isExists&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">userName</span>: <span class="variable language_">this</span>.<span class="property">username</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">msg</span>=res.<span class="property">data</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue2学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Vue" scheme="https://lptexas.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs学习笔记Part2</title>
    <link href="https://lptexas.top/posts/2315174609/"/>
    <id>https://lptexas.top/posts/2315174609/</id>
    <published>2023-07-14T16:00:00.000Z</published>
    <updated>2024-10-04T09:04:10.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a><a href="https://expressjs.com.cn/">Express</a></h1><p>Express是一个基于Node.js平台的，快速、开放、极简的Web开发框架</p><p>可以用于开发<code>Web服务器</code>和<code>API接口服务器</code>。</p><p>是对Nodejs内置API的封装，类似<code>WebAPIs</code>和<code>Jquery</code>的关系。</p><h2 id="使用Express"><a href="#使用Express" class="headerlink" title="使用Express"></a>使用Express</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express -S</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建Web服务器"><a href="#创建Web服务器" class="headerlink" title="创建Web服务器"></a>创建Web服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running at http://127.0.0.1:80&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听GET请求"><a href="#监听GET请求" class="headerlink" title="监听GET请求"></a>监听GET请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/访问地址&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听POST请求"><a href="#监听POST请求" class="headerlink" title="监听POST请求"></a>监听POST请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/访问地址&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="相应内容到客户端"><a href="#相应内容到客户端" class="headerlink" title="相应内容到客户端"></a>相应内容到客户端</h3><p><code>end()</code>方法可以返回<code>普通字符串</code>对象也可以返回<code>json</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><h3 id="获取url中的查询参数"><a href="#获取url中的查询参数" class="headerlink" title="获取url中的查询参数"></a>获取url中的查询参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/?id=1&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params=req.<span class="property">query</span>; <span class="comment">//返回Json对象</span></span><br><span class="line">    <span class="keyword">const</span> id=req.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">   ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取url中的动态参数"><a href="#获取url中的动态参数" class="headerlink" title="获取url中的动态参数"></a>获取url中的动态参数</h3><p>使用<code>:</code>匹配动态参数（路径参数），举例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> id=req.<span class="property">params</span>; <span class="comment">//返回Json对象</span></span><br><span class="line">   ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="创建静态资源服务器"><a href="#创建静态资源服务器" class="headerlink" title="创建静态资源服务器"></a>创建静态资源服务器</h3><p>使用<code>use()</code>方法挂载<code>路径前缀</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;文件夹路径&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/路径&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;文件夹路径&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a>Express路由</h2><p>在Express中，路由指<code>客户端的请求</code>和<code>服务器处理函数</code>之间的映射关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">METHOD</span>(<span class="string">&#x27;/...&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h3><p><img src="https://lptexas-cub.github.io/img/post/image-20230716092611171.png" alt="image-20230716092611171"></p><h3 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a>模块化路由</h3><p>不建议直接将路由挂载<code>app</code>上，推荐将路由抽离为单个模块。</p><ol><li>创建路由模块对应的js文件。</li><li>调用<code>express.Router()</code>函数创建路由对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router=express.<span class="title class_">Router</span>();</span><br></pre></td></tr></table></figure><ol start="3"><li>向路由对象上挂载具体的路由。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.METHOD(&#x27;/...&#x27;,function(req,res)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>使用<code>module.exports</code>向外共享路由对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=router</span><br></pre></td></tr></table></figure><ol start="5"><li>使用<code>app.use()</code>函数注册路由模块。</li></ol><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>在接收到请求后，往往不会只进行依次处理，而要经过多个中间件。</p><h3 id="中间件函数与路由函数"><a href="#中间件函数与路由函数" class="headerlink" title="中间件函数与路由函数"></a>中间件函数与路由函数</h3><p>中间件函数相对于路由函数多了一个<code>next</code>参数和<code>next()</code>函数的调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/...&#x27;</span>,<span class="keyword">function</span>(<span class="params">res.req,next</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">     <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>next()函数</code>是实现多个中间件连续调用的关键，它将处理结果转交给下一个中间件或路由。</p><h3 id="全局生效中间件"><a href="#全局生效中间件" class="headerlink" title="全局生效中间件"></a>全局生效中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(中间件函数<span class="number">1</span>)</span><br><span class="line">app.<span class="title function_">use</span>(中间件函数<span class="number">1</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>中间件会根据代码顺序对结果进行传递。</p><h3 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h3><p>中间件函数可以对所有的请求进行一些预处理。比如：挂载一些新的参数，<code>req.新参数=参数值</code>；将每个路由中相同的操作抽离作为中间件，这样就不需要每个路由都写一遍了。</p><h3 id="局部生效的中间件"><a href="#局部生效的中间件" class="headerlink" title="局部生效的中间件"></a>局部生效的中间件</h3><p>这里的局部生效是指在某个特定的路由中生效的中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/...&#x27;</span>,中间件函数<span class="number">1</span>,中间件函数<span class="number">2</span>,...,路由函数) <span class="comment">//写多个参数的形式添加中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/...&#x27;</span>,[中间件函数<span class="number">1</span>,中间件函数<span class="number">2</span>,...],路由函数) <span class="comment">//使用数组将中间件函数做为一个参数</span></span><br></pre></td></tr></table></figure><h3 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h3><ol><li>应用级别的中间件</li></ol><p>将中间件绑定到<code>app</code>上，如：app.get()、app.use()等。</p><ol start="2"><li>路由级别的中间件</li></ol><p>将中间件绑定到<code>router</code>上，如：router.get()、router.use()等。</p><ol start="3"><li>错误级别的中间件</li></ol><p>错误级别的中间件专门用来捕获整个项目中发生的异常错误，从而防止项目崩溃的问题。</p><p>错误级别的中间件函数多了一个<code>err</code>参数。注意顺序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mw=<span class="keyword">function</span>(<span class="params">err,req,res,next</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Express内置的中间件"><a href="#Express内置的中间件" class="headerlink" title="Express内置的中间件"></a>Express内置的中间件</h3><ol><li>express.static快速托管静态资源。</li><li>express.json解析JSON格式的请求数据。（express版本要求 4.16+）</li><li>express.urlencoded解析URL-encoded格式的请求数据。（express版本要求 4.16+）</li></ol><h3 id="Express解析urlencoded格式的数据"><a href="#Express解析urlencoded格式的数据" class="headerlink" title="Express解析urlencoded格式的数据"></a>Express解析urlencoded格式的数据</h3><p>默认情况下，如果不配置解析表单的中间件，<code>req.body</code>值为<code>undefined</code>。</p><p><a href="https://blog.csdn.net/haozi_love/article/details/123292203">使用ajax提交的请求一般是urlencoded数据格式。</a></p><p>可以通过<a href="https://blog.csdn.net/haozi_love/article/details/123292203"><code>contentType</code></a>设置发送的数据类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)) <span class="comment">//用于获取urlencoded格式的数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/...&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Express解析JSON格式的数据"><a href="#Express解析JSON格式的数据" class="headerlink" title="Express解析JSON格式的数据"></a>Express解析JSON格式的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.use(express.urlencoded(&#123; extended: false &#125;)) //用于获取urlencoded格式的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>()) <span class="comment">//用于获取json格式的数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/...&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="req的事件"><a href="#req的事件" class="headerlink" title="req的事件"></a><a href="https://blog.csdn.net/weixin_45525653/article/details/127462132">req的事件</a></h3><h3 id="data事件"><a href="#data事件" class="headerlink" title="data事件"></a>data事件</h3><p>在中间件中，需要监听 req 对象的 data 事件，来获取客户端发送到服务器的数据。如果数据量比较大，无法一次性发送完毕，则客户端会把数据切割后，分批发送到服务器。所以 data 事件可能会触发多次，每一次触发 data 事件时，获取到数据只是完整数据的一部分，需要手动对接收到的数据进行拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    req.<span class="title function_">on</span>(data,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        str+=chunk;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="end事件"><a href="#end事件" class="headerlink" title="end事件"></a>end事件</h3><p>当请求体数据接收完毕之后，会自动触发 req 的 end 事件。<br>因此，我们可以在 req 的 end 事件中，拿到并处理完整的请求体数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入处理querystring的Node.js内置模块</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        str += chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123; </span><br><span class="line">        <span class="comment">// 在str中存放的是完整的请求体数据)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// name=Ulrich&amp;age=22&amp;gender=male</span></span><br><span class="line">        <span class="keyword">const</span> body = qs.<span class="title function_">parse</span>(str) <span class="comment">// &#123; name: &#x27;Ulrich&#x27;, age: &#x27;22&#x27;, gender: &#x27;male&#x27; &#125;</span></span><br><span class="line">        req.<span class="property">body</span> = body; <span class="comment">//将解析出的对象挂载到body属性上</span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件模块化"><a href="#中间件模块化" class="headerlink" title="中间件模块化"></a>中间件模块化</h3><p>类似路由模块化。</p><h1 id="网络资源请求"><a href="#网络资源请求" class="headerlink" title="网络资源请求"></a>网络资源请求</h1><p>由于<code>请求协议</code>、<code>端口</code>等因素的影响导致出现跨域错误。一般使用<code>CORS</code>方案进行解决。</p><p>cors是Express的一个第三方中间件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cors</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br></pre></td></tr></table></figure><h2 id="解决跨域资源共享"><a href="#解决跨域资源共享" class="headerlink" title="解决跨域资源共享"></a>解决跨域资源共享</h2><h3 id="1-设置响应头部"><a href="#1-设置响应头部" class="headerlink" title="1. 设置响应头部"></a>1. <a href="https://www.cnblogs.com/baiyygynui/p/13743135.html">设置响应头部</a></h3><p><code>Access-Control-Allow-Origin</code>可以设置哪些<code>服务器</code>可以访问资源。可以使用<code>*</code>代表所有域名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;https://lptexas.top/&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Header</code>可以设置需要发送的额外头信息。</p><p>默认情况CORS仅支持<code>客户端向服务器</code>发送下方9个请求头：</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230718205052585.png" alt="image-20230718205052585"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>,<span class="string">&#x27;可以使用逗号分割多个&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>Access-Control-Allow-Methods</code>设置额外允许的请求方式。</p><p>默认情况CORS仅支持get、post、head请求。可以使用<code>*</code>代表所有请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;可以使用逗号分隔多个&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-使用cors模块"><a href="#2-使用cors模块" class="headerlink" title="2. 使用cors模块"></a>2. 使用cors模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">cors</span>(&#123;</span><br><span class="line">    <span class="attr">origins</span>:[<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>],  <span class="comment">//设置哪些服务器可以访问资源</span></span><br><span class="line">    <span class="attr">methods</span>:[<span class="string">&#x27;...&#x27;</span>]<span class="comment">//设置哪些方法可用访问资源</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-JSONP"><a href="#3-JSONP" class="headerlink" title="3. JSONP"></a>3. <a href="https://www.runoob.com/json/json-jsonp.html">JSONP</a></h3><p>浏览器端通过&lt;script&gt;标签的src属性，请求服务器上的数据，同时服务器返回一个函数调用。这种请求数据的方式叫做JSONP。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>JSONP不属于真正的Ajax请求，因为没有使用XMLHttpRequset对象。</p><p>JSONP仅支持GET请求。</p><h2 id="简单请求和预检请求"><a href="#简单请求和预检请求" class="headerlink" title="简单请求和预检请求"></a>简单请求和预检请求</h2><p>简单请求：客户端和服务器端只会发生一次请求。</p><p>预检请求：客户端与服务器之间发生两次请求，OPTION预检请求成功之后，才会发送真正的请求。</p><h1 id="nodemon工具"><a href="#nodemon工具" class="headerlink" title="nodemon工具"></a>nodemon工具</h1><p>实现热部署。</p><p>监听代码变化，重新执行代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用<code>nodemon</code>命令替代<code>node</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.<span class="property">js</span></span><br></pre></td></tr></table></figure><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql</span><br></pre></td></tr></table></figure><h2 id="配置和连接数据库"><a href="#配置和连接数据库" class="headerlink" title="配置和连接数据库"></a>配置和连接数据库</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="comment">//配置mysql</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;host&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;mydb&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="测试数据库连接"><a href="#测试数据库连接" class="headerlink" title="测试数据库连接"></a>测试数据库连接</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;sql语句&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,results</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用占位符"><a href="#使用占位符" class="headerlink" title="使用占位符"></a>使用占位符</h2><p>在sql语句中，可以使用<code>?</code>作为占位符。在使用数组一次指定占位符中的具体值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;sql语句&#x27;</span>,[占位符值<span class="number">1</span>,占位符值<span class="number">2</span>,...],callback)</span><br></pre></td></tr></table></figure><p>快速的插入多个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data=&#123;字段<span class="number">1</span>:<span class="string">&quot;值1&quot;</span>,字段<span class="number">2</span>:<span class="string">&quot;值2&quot;</span>&#125;；</span><br><span class="line"><span class="keyword">const</span> sql=<span class="string">&#x27;insert into 表名 set ?&#x27;</span>；</span><br><span class="line">db.<span class="title function_">query</span>(sql,data,callback)</span><br></pre></td></tr></table></figure><p>更新操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql=<span class="string">&#x27;update 表名 set 属性=值,属性=值 where 属性=值&#x27;</span></span><br><span class="line"><span class="comment">//快速更新</span></span><br><span class="line"><span class="keyword">const</span> sql=<span class="string">&#x27;update 表名 set ? where 属性=?&#x27;</span></span><br></pre></td></tr></table></figure><p>删除操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql=<span class="string">&#x27;delete from 表名 where 属性=值&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><p>如扫码登录、手机验证码登录等。</p><h2 id="Session认证机制"><a href="#Session认证机制" class="headerlink" title="Session认证机制"></a>Session认证机制</h2><p>建议服务端渲染方式使用。</p><h3 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a>HTTP协议的无状态性</h3><p>服务器不会主动保留每次HTTP请求的状态。每次请求都是独立的。</p><h3 id="打破无状态性"><a href="#打破无状态性" class="headerlink" title="打破无状态性"></a>打破无状态性</h3><p>服务器为某次请求发放身份标识<a href="https://zhuanlan.zhihu.com/p/79819678"><code>Cookie</code></a>。</p><p>用户第一次请求服务器时，服务器<code>通过响应头</code>，向客户端发送一个身份Cookie，客户端会自动将Cookie保存在浏览器中。</p><p>随后，每次客户端访问浏览器，浏览器会自动将身份认证相关的Cookie，通过请求头的形式，发送给服务器，服务器会鉴别客户端身份。</p><p>Cookie很容易伪造，不具有安全性。</p><h3 id="提高身份认证安全性"><a href="#提高身份认证安全性" class="headerlink" title="提高身份认证安全性"></a>提高身份认证安全性</h3><p><code>客户端Cookie+服务器Cookie认证</code>Session认证机制的精髓。</p><h3 id="Session工作原理"><a href="#Session工作原理" class="headerlink" title="Session工作原理"></a>Session工作原理</h3><p><img src="https://lptexas-cub.github.io/img/post/image-20230720074015101.png" alt="image-20230720074015101"></p><h3 id="在Express中使用Session认证"><a href="#在Express中使用Session认证" class="headerlink" title="在Express中使用Session认证"></a><a href="https://www.npmjs.com/package/express-session">在Express中使用Session认证</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express-session</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session=<span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//可以为任意字符串</span></span><br><span class="line">    <span class="attr">resave</span>:<span class="literal">false</span>, <span class="comment">//固定写法</span></span><br><span class="line">    <span class="attr">saveUninitinalized</span>:<span class="literal">true</span> <span class="comment">//固定写法   </span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="向session中存数据"><a href="#向session中存数据" class="headerlink" title="向session中存数据"></a>向session中存数据</h3><p>配置完毕后，可以使用<code>req.session</code>，来访问和使用session对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/...&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">xxx</span>=xxx;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="取session中的数据"><a href="#取session中的数据" class="headerlink" title="取session中的数据"></a>取session中的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/...&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">session</span>.<span class="property">xxx</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br></pre></td></tr></table></figure><h2 id="JWT认证机制"><a href="#JWT认证机制" class="headerlink" title="JWT认证机制"></a>JWT认证机制</h2><p>推荐前后端分离方式使用。</p><p>Session认证机制需要配合Cookie才能实现。由于Cookie默认不支持跨域访问，所以当涉及前端跨域请求后端接口时，需要做很多额外配置，才能实现跨域Session认证。</p><p>当前端需要跨域请求后端接口时，推荐使用<code>JWT认证机制</code>。</p><h3 id="JWT是什么？"><a href="#JWT是什么？" class="headerlink" title="JWT是什么？"></a>JWT是什么？</h3><p>JWT，JSON Web token是目前最流行的跨域认证解决方案。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="https://lptexas-cub.github.io/img/post/image-20230723154056241.png" alt="image-20230723154056241"></p><p>用户信息通过Token字符串的形式，保存在客户端浏览器中。服务器通过还原Token字符串的形式来认证用户的身份。 </p><h3 id="JWT组成部分"><a href="#JWT组成部分" class="headerlink" title="JWT组成部分"></a>JWT组成部分</h3><p>Header头部、Payload有效负载、Signature签名。</p><p>xxxxxxxxxx25 1&#x2F;&#x2F; 引入 events 模块2var events &#x3D; require(‘events’);3&#x2F;&#x2F; 创建 eventEmitter 对象4var eventEmitter &#x3D; new events.EventEmitter();5 6&#x2F;&#x2F; 创建事件处理程序7var connectHandler &#x3D; function connected() {8   console.log(‘连接成功。’);9  10   &#x2F;&#x2F; 触发 data_received 事件 11   eventEmitter.emit(‘data_received’);12}13 14&#x2F;&#x2F; 绑定 connection 事件处理程序15eventEmitter.on(‘connection’, connectHandler);16 17&#x2F;&#x2F; 使用匿名函数绑定 data_received 事件18eventEmitter.on(‘data_received’, function(){19   console.log(‘数据接收成功。’);20});21 22&#x2F;&#x2F; 触发 connection 事件 23eventEmitter.emit(‘connection’);24 25console.log(“程序执行完毕。”);shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Header</span>.Payload.Signature</span><br></pre></td></tr></table></figure><ol><li>Header头部和Signature签名，属于安全性相关部分，用于保证Token的安全性。</li><li>Payload有效负载，真正的信息，它由用户信息加密后生成。</li></ol><h3 id="JWT使用方式"><a href="#JWT使用方式" class="headerlink" title="JWT使用方式"></a>JWT使用方式</h3><p>客户端收到的JWT保存在<code>localStorage</code>或<code>sessionStorage</code>中。</p><p>客户端与服务器通信一般将<code>JWT字符</code>放在<code>头部</code>的<code>Authorization</code>字段中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i jsonwebtoken express-jwt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jsonwebtoken用于生成jwt字符串</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">express-jwt用于解析jwt还原成json对象</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="登录成功后生成jwt字符串，响应给客户端"><a href="#登录成功后生成jwt字符串，响应给客户端" class="headerlink" title="登录成功后生成jwt字符串，响应给客户端"></a>登录成功后生成jwt字符串，响应给客户端</h4><p>调用<code>jsonwebtoken</code>中的<code>sign()</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsonwebtoken.<span class="title function_">sign</span>(用户的信息对象,加密的密钥,配置对象如可以配置当前token的时间)</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> secretKey=<span class="string">&#x27;LPtexas&#x27;</span></span><br><span class="line"><span class="keyword">const</span> jwtStr=jwt.<span class="title function_">sign</span>(&#123;<span class="attr">userName</span>:req.<span class="property">body</span>.<span class="property">userName</span>,<span class="attr">password</span>:req.<span class="property">body</span>.<span class="property">password</span>&#125;,secretKey,&#123;<span class="attr">expiresIn</span>:<span class="string">&#x27;30m&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="将jwt字符串还原为json对象"><a href="#将jwt字符串还原为json对象" class="headerlink" title="将jwt字符串还原为json对象"></a>将jwt字符串还原为json对象</h4><p>使用<code>express-jwt</code>中间件，调用<code>unless(&#123;&#123;path:["/..."]&#125;&#125;)</code>方法可以指定哪些接口不需要访问权限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.3.3之前的版本使用：</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;<span class="attr">secret</span>:secretKey&#125;).<span class="title function_">unless</span>(&#123;<span class="attr">path</span>:[<span class="regexp">/正则表达式/</span>]&#125;));</span><br><span class="line"><span class="comment">//使用正则进行匹配path，两个斜线中间写正则表达式</span></span><br><span class="line"><span class="comment">//5.3.3之后的版本使用：</span></span><br><span class="line">app.<span class="title function_">use</span>(expressJWT.<span class="title function_">expressjwt</span>(&#123; <span class="attr">secret</span>: secretKey ,<span class="attr">algorithms</span>:[<span class="string">&quot;HS256&quot;</span>]&#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/正则表达式/</span>] &#125;));</span><br></pre></td></tr></table></figure><h4 id="将jwt字符串放入头部的Authorization的字段中"><a href="#将jwt字符串放入头部的Authorization的字段中" class="headerlink" title="将jwt字符串放入头部的Authorization的字段中"></a><a href="https://www.zhihu.com/question/305585277">将jwt字符串放入<code>头部</code>的<code>Authorization</code>的字段中</a></h4><p>注意需要再值前添加<code>Bearer </code></p><p><img src="https://lptexas-cub.github.io/img/post/image-20230723171206339.png" alt="image-20230723171206339"></p><h4 id="使用req-user获取用户信息"><a href="#使用req-user获取用户信息" class="headerlink" title="使用req.user获取用户信息"></a>使用<code>req.user</code>获取用户信息</h4><p>使用了express-jwt后，jwt解析的结果被挂载到了req.user属性中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.3.3版本以前使用：</span></span><br><span class="line">req.<span class="property">user</span></span><br><span class="line"><span class="comment">//5.3.3版本以后使用：</span></span><br><span class="line">req.<span class="property">auth</span></span><br></pre></td></tr></table></figure><h4 id="捕获解析jwt失败后产生的错误"><a href="#捕获解析jwt失败后产生的错误" class="headerlink" title="捕获解析jwt失败后产生的错误"></a>捕获解析jwt失败后产生的错误</h4><p>使用一个中间件来解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//捕获身份认证错误</span></span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">name</span> == <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">            <span class="attr">msg</span>: err.<span class="property">message</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="attr">msg</span>: err.<span class="property">message</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义secret密钥"><a href="#定义secret密钥" class="headerlink" title="定义secret密钥"></a>定义secret密钥</h3><p>用于保证JWT字符串的安全性。</p><p>用于加密和解密JWT。</p><p>越复杂越好。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;我是一个复杂的字符串&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">nodejs学习笔记</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Nodejs" scheme="https://lptexas.top/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue2学习笔记Part1</title>
    <link href="https://lptexas.top/posts/2614050479/"/>
    <id>https://lptexas.top/posts/2614050479/</id>
    <published>2023-07-13T16:00:00.000Z</published>
    <updated>2024-10-04T09:02:00.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue是什么？"><a href="#vue是什么？" class="headerlink" title="vue是什么？"></a>vue是什么？</h1><p>vue是用于快捷构建用户界面的Javascript框架。</p><h1 id="vue的特性"><a href="#vue的特性" class="headerlink" title="vue的特性"></a>vue的特性</h1><h2 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a>数据驱动视图</h2><p>vue会监听数据变化，当数据发生变化时，会<code>自动渲染</code>页面。</p><p>数据驱动视图是<code>单向的数据绑定</code>。</p><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>不再需要手动操作DOM来获取元素的最新值了，在<code>表单提交的数据会自动提交给元素</code>。</p><p>将标签与变量进行了绑定。</p><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p>mvvm是vue实现数据驱动视图和双向数据绑定的核心原理。</p><p>mvvm是指Model模型、View视图、ViewModel视图模型。</p><ul><li>Model是当前渲染所依赖的数据源。</li><li>View是当前页面所渲染的DOM树。</li><li>ViewModel是vue实例，是MVVM的核心。</li></ul><p>ViewModel是连接Model和View的桥梁。</p><ul><li>当数据发送变化时，ViewModel会监听到变化并自动更新View。</li><li>当视图中表单值发生变化时，ViewModel会自动更新Model。</li></ul><h1 id="vue的基本使用"><a href="#vue的基本使用" class="headerlink" title="vue的基本使用"></a>vue的基本使用</h1><ol><li>导入<code>vue.js</code>的脚本文件。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>声明vue的控制域，即声明一个被控制的DOM区域。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 01 设置vue的控制域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建vue实例对象。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 创建vue实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el:用于指定控制域，值为css选择器。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data:用于设置数据。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="vue语法"><a href="#vue语法" class="headerlink" title="vue语法"></a>vue语法</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>更新元素的 <code>textContent</code>，即：将数据对象的值赋值给标签，类似插值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 01 设置vue的控制域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;vTextCmd&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//02 创建vue实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el:用于指定控制域，值为css选择器。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data:用于设置数据。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">vTextCmd</span>:<span class="string">&quot;我是v-text&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">注意</p><p>使用<code>v-text</code>会覆盖原本的内容，如果需要更新部分内容，建议使用插值表达式。</p></div><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-html">v-html</a></h3><p>更新元素的 <code>innerHTML</code>。详情见下文：插值-原始HTML。</p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-show">v-show</a></h3><p>根据表达式之真假值，切换元素的 <code>display</code>属性。无论表达式的真假，该元素都将被渲染在DOM树中。</p><p>当条件变化时该指令触发过渡效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>v-show条件渲染<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>根据表达式之<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">真值</a>，来有条件地渲染元素。当条件为真时，才会被渲染到DOM树中。</p><p>在切换时元素及它的数据绑定 &#x2F; 组件被销毁并重建。</p><p>如果元素是 <code>&lt;template&gt;</code>，将提取出它的内容作为条件块。</p><p>当条件变化时该指令触发过渡效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;true&quot;</span>&gt;</span>v-if条件渲染<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-else">v-else</a></h3><p>前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>v-if条件渲染<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>v-else条件渲染<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-else-if">v-else-if</a></h3><p>前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>v-if条件渲染<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span>v-else-if条件渲染<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-for">v-for</a></h3><p>表达式为：<code>Array | Object | number | string | Iterable (2.6 新增)</code>对象。</p><p>基于源数据多次渲染元素或模板块。语法 <code>别名 in 表达式</code>，需要为当前遍历的元素提供别名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以为数组索引指定别名 (或者用于对象的键)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span>数组<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, key) in object&quot;</span>&gt;</span>对象<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, name, index) in object&quot;</span>&gt;</span>对象<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-for</code> 的默认行为会尝试原地修改元素而不是移动它们。要强制其重新排序元素，你需要用特殊属性<code>key</code> 来提供一个排序提示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>  &#123;&#123; item.text &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">key</p><p>key的作用相当于是数据库中的主键，所以key的值不能重复。key的设置能提高性能、防止列表状态紊乱。使用index作为key没有意义。</p></div><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-on">v-on</a></h3><p>绑定事件监听器。类似：<code>addEventListner</code>。</p><p>用在普通元素上时，只能监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events"><strong>原生 DOM 事件</strong></a>。用在自定义元素组件上时，也可以监听子组件触发的<strong>自定义事件</strong>。</p><p>在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event</code>属性，如：<code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>。默认情况下，如果是使用方法名，会默认传入<code>$event</code>，如：<code>v-on:click=&quot;handle&quot;</code>。</p><p><strong>缩写</strong>：<code>@</code>。</p><p><strong>事件</strong>：<a href="https://www.runoob.com/jsref/dom-obj-event.html"><code>event</code></a>。</p><p><strong>修饰符</strong>：</p><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li><li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调。</li><li><code>.native</code> - 监听组件根元素的原生事件。</li><li><code>.once</code> - 只触发一次回调。</li><li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li><li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li><li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li><li><code>.passive</code> - (2.3.0) 以 <code>&#123; passive: true &#125;</code> 模式添加侦听器</li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-bind">v-bind</a></h3><p>动态地绑定一个或多个属性，或一个组件 prop 到表达式。</p><p><strong>缩写</strong>：<code>:</code>。</p><p><strong>修饰符</strong>：</p><ul><li><code>.prop</code> - 作为一个 DOM property 绑定而不是作为 attribute 绑定。(<a href="https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028">差别在哪里？</a>)</li><li><code>.camel</code> - (2.1.0+) 将 kebab-case attribute 名转换为 camelCase。(从 2.1.0 开始支持)</li><li><code>.sync</code> (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 <code>v-on</code> 侦听器。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;ph&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model-lt-gt"><a href="#v-model-lt-gt" class="headerlink" title="v-model &lt;!&gt;"></a><a href="https://v2.cn.vuejs.org/v2/api/#v-model">v-model</a> &lt;!&gt;</h3><p>在表单控件或者组件上创建双向绑定。</p><p>用于快速获取和设置表单中的数据，不用操作DOM。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><p>将 DOM 绑定至底层 Vue 实例的数据，即：用于在html代码中，获取data中设置的数据。</p><p>使用<code>“Mustache”语法</code> 双大括号<code>&#123;&#123;&#125;&#125;</code>的插值。</p><p>默认情况下，当数据对象中的值发生变化时，插值处的数据也会发生变化。</p><p><img src="C:\Users\Lappland\AppData\Roaming\Typora\typora-user-images\image-20230801130344815.png" alt="image-20230801130344815"></p><h3 id="一次性插值"><a href="#一次性插值" class="headerlink" title="一次性插值"></a>一次性插值</h3><p>通过使用 <a href="https://v2.cn.vuejs.org/v2/api/#v-once">v-once 指令</a>，让数据改变时，插值处的内容不会更新。</p><p>仅渲染元素和组件一次，并跳过之后的更新。在随后的重新渲染，元素&#x2F;组件及其所有子项将被当作静态内容并跳过渲染。这可以用来优化更新时的性能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a><a href="https://v2.cn.vuejs.org/v2/guide/syntax.html#%E5%8E%9F%E5%A7%8B-HTML">原始 HTML</a></h3><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 <a href="https://v2.cn.vuejs.org/v2/api/#v-html"><code>v-html</code></a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span>&#123;&#123;rawHtml&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a><a href="https://v2.cn.vuejs.org/v2/guide/syntax.html#%E4%BD%BF%E7%94%A8-JavaScript-%E8%A1%A8%E8%BE%BE%E5%BC%8F">使用 JavaScript 表达式</a></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125; </span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">注意</p><p>每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">{{ var a = 1 }}</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">{{ if (ok) { return message } }}</span><br></pre></td></tr></table></figure></p></div><h1 id="选项-x2F-声明周期钩子"><a href="#选项-x2F-声明周期钩子" class="headerlink" title="选项&#x2F;声明周期钩子"></a>选项&#x2F;声明周期钩子</h1><h2 id="this变量"><a href="#this变量" class="headerlink" title="this变量"></a>this变量</h2><p>所有生命周期钩子的 <code>this</code> 上下文将自动绑定至实例中，因此你可以访问 data、computed 和 methods。</p><blockquote><p>待续…</p></blockquote>]]></content>
    
    
    <summary type="html">Vue2学习笔记</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Vue" scheme="https://lptexas.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Webpack前端项目工程化</title>
    <link href="https://lptexas.top/posts/3146662735/"/>
    <id>https://lptexas.top/posts/3146662735/</id>
    <published>2023-07-13T16:00:00.000Z</published>
    <updated>2024-10-04T09:02:13.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是webpack？"><a href="#什么是webpack？" class="headerlink" title="什么是webpack？"></a><a href="https://www.webpackjs.com/">什么是webpack？</a></h1><p>本质上，<strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 <em>静态模块打包工具</em>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 <a href="https://www.webpackjs.com/concepts/dependency-graph/">依赖图(dependency graph)</a>，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em>，它们均为静态资源，用于展示你的内容。</p><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><blockquote><p>兼容问题</p></blockquote><p>解决Javascript<code>高级语法</code>在<code>低版本浏览器</code>的兼容问题。</p><p>我们可以放心使用高级的语法，webpack会在运行时<code>自动转换成</code>兼容的语法。</p><blockquote><p>性能优化</p></blockquote><blockquote><p>规范化代码</p></blockquote><blockquote><p>代码压缩混淆</p></blockquote><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>安装至<code>devDependencies</code>节点中，仅在开发阶段中使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>在项目<code>根目录</code>创建<code>webpack.config.js</code>配置文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span> <span class="comment">//用于指定构建模式，可选值：development、production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>中的<code>scripts</code>节点，新增<code>dev脚本</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack&quot;</span> <span class="comment">//script节点下的脚本，可以通过npm run执行，如:npm run dev</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="admonition info"><p class="admonition-title">webpack中的默认约定</p><p>webpack 4.x和5.x的版本中，有如下的默认约定：</p><ol><li>默认的打包入口文件为<code>src</code>-&gt;<code>index.js</code></li><li>默认的输出文件路径为<code>dist</code>-&gt;<code>main.js</code>默认约定可以在<code>webpack.config.js</code>中进行修改。</li></ol></div><h2 id="创建列表隔行变色项目"><a href="#创建列表隔行变色项目" class="headerlink" title="创建列表隔行变色项目"></a>创建列表隔行变色项目</h2><blockquote><p>js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line">$(()=&gt;&#123;</span><br><span class="line">    $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">    $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>奇偶行变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第7个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第8个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第9个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一个报错：</p><p><code>Uncaught SyntaxError: Cannot use import statement outside a module</code></p><p>问题出在<code>js</code>第一行<code>import $ from &#39;jquery&#39;</code></p><p>解决方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run webpack</span><br></pre></td></tr></table></figure><p>修改导入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;../dist/main.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="使用代码压缩混淆"><a href="#使用代码压缩混淆" class="headerlink" title="使用代码压缩混淆"></a>使用代码压缩混淆</h2><p>将配置文件<code>webpack.config.js</code>中的<code>mode</code>修改为<code>production</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;production&#x27;</span> <span class="comment">//用于指定构建模式，可选值：development、production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>压缩时间较长，一般不会在开发阶段使用。</p></blockquote><h2 id="修改默认约定"><a href="#修改默认约定" class="headerlink" title="修改默认约定"></a>修改默认约定</h2><p>在<code>webpack.config.js</code>中进行修改。</p><p>entry：设置入口文件。</p><p>output：设置输出文件的目录和文件名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index1.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;main1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span> <span class="comment">//用于指定构建模式，可选值：development、production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="webpack插件"><a href="#webpack插件" class="headerlink" title="webpack插件"></a>webpack插件</h1><h2 id="插件的作用"><a href="#插件的作用" class="headerlink" title="插件的作用"></a>插件的作用</h2><p>第三方插件能够拓展webpack的能力。</p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server</span><br></pre></td></tr></table></figure><ul><li>类似node.js节点使用nodemon工具</li><li>每当修改源代码，webpack会自动进行项目的打包和构建</li></ul><p>webpack-dev-server打包的js文件存储在<code>内存</code>中。</p><h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin</span><br></pre></td></tr></table></figure><ul><li>webpack中的HTML插件（类似于一个模板引擎插件）</li><li>可以通过该插件自定义index.html页面的内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//1.导入HTML插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span>=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="comment">//2.创建HTML对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin=<span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>, <span class="comment">//指定源文件的位置</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./index.html&#x27;</span> <span class="comment">//指定目标文件的位置</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3.通过plugins节点，使htmlPlugin实例生效</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="attr">entry</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index1.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;main1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>, <span class="comment">//用于指定构建模式，可选值：development、production</span></span><br><span class="line">    <span class="attr">plugins</span>:[htmlPlugin],<span class="comment">//加载并调用插件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>devServer节点</p></blockquote><p>在<code>webpack.config.js</code>中配置。</p><p>可以配置自动打开浏览器、设置端口号、IP地址等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">open</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">8081</span>,</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-loader"><a href="#webpack-loader" class="headerlink" title="webpack loader"></a>webpack loader</h2><p>webpack默认只能处理<code>js</code>文件。</p><p>webpack处理不了的，需要调用<code>loader</code>加载器才能正常打包。</p><p>loader用于协助webpack打包处理特定的文件模块。</p><ul><li>css-loader</li><li>less-loader</li><li>babel-loader</li></ul><h3 id="使用和配置css-loader"><a href="#使用和配置css-loader" class="headerlink" title="使用和配置css-loader"></a>使用和配置css-loader</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i style-loader css-loader -D</span><br></pre></td></tr></table></figure><p>配置<code>webpack.config.js</code>文件。新增<code>module</code>节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;<span class="comment">//所有使用第三方文件模块的匹配规则</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">//文件后缀名匹配规则</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;</span><br><span class="line">        <span class="comment">//test表示文件类型，use表示要调用的loader。</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用和配置url-loader、file-loader"><a href="#使用和配置url-loader、file-loader" class="headerlink" title="使用和配置url-loader、file-loader"></a>使用和配置url-loader、file-loader</h3><p>用于处理样式表中与url路径相关的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i url-loader file-loader -D</span><br></pre></td></tr></table></figure><p>在<code>webpack.config.js</code>中配置<code>rules</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;<span class="comment">//所有使用第三方文件模块的匹配规则</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">//文件后缀名匹配规则</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=114&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>?</code>为loader的参数项：limit用于指定图片的大小，单位是字节。当图片小于等于limit时，url会被转换为<code>base64</code>格式。</p></blockquote><h3 id="使用和配置babel-loader"><a href="#使用和配置babel-loader" class="headerlink" title="使用和配置babel-loader"></a>使用和配置babel-loader</h3><p>应用于webpack都处理不了的js文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/plugin-proposal-decorators -D</span><br></pre></td></tr></table></figure><p>配置<code>webpack.config.js</code>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;<span class="comment">//所有使用第三方文件模块的匹配规则</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">//文件后缀名匹配规则</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;babel-loader&#x27;</span>],<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;<span class="comment">//注意必须排除node_modules目录。</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>babel.config.js</code>配置一些插件，如：用于处理修饰器的<code>@babel/plugin-proposal-decorators</code>插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">    <span class="comment">//声明babel可用的插件</span></span><br><span class="line">    <span class="attr">plugins</span>:[[<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>,&#123;<span class="attr">legacy</span>:<span class="literal">true</span>&#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////babel-loader////////////</span></span><br><span class="line"><span class="comment">//定义修饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">info</span>(<span class="params">target</span>) &#123;</span><br><span class="line">    target.<span class="property">info</span> = <span class="string">&#x27;Person info&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义普通类</span></span><br><span class="line">@info</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="comment">//打印普通类中的属性info的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">info</span>);</span><br><span class="line"><span class="comment">////////////////////////////////////</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line">    $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a><a href="https://www.npmjs.com/package/clean-webpack-plugin">clean-webpack-plugin</a></h2><p>用于自动删除<code>旧的dist</code>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure><p>修改<code>webpack.config.js</code>文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = webpackConfig;</span><br></pre></td></tr></table></figure><h1 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h1><p>将原本在<code>内存</code>中的文件保存到<code>磁盘</code>中。</p><p>在<code>package.json</code>文件中的<code>scripts</code>脚本中，新增<code>build</code>命令。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span><span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><blockquote><p>不添加mode参数也能实现打包，加上后可实现压缩混淆。</p></blockquote><h2 id="分类存放"><a href="#分类存放" class="headerlink" title="分类存放"></a>分类存放</h2><h3 id="将所有js文件放在js目录。"><a href="#将所有js文件放在js目录。" class="headerlink" title="将所有js文件放在js目录。"></a>将所有<code>js</code>文件放在<code>js目录</code>。</h3><p>修改<code>webpack.config.js</code>配置文件。在<code>filename</code>中添加目录<code>js/</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/main1.js&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="将所有的图片资源放在images目录。"><a href="#将所有的图片资源放在images目录。" class="headerlink" title="将所有的图片资源放在images目录。"></a>将所有的<code>图片</code>资源放在<code>images目录</code>。</h3><p>修改<code>webpack.config.js</code>文件。添加<code>outputPath</code>参数，使用<code>&amp;</code>进行连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;<span class="comment">//所有使用第三方文件模块的匹配规则</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">//文件后缀名匹配规则</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]&#125;,</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.jpg|png|gif$/</span>,<span class="attr">use</span>:<span class="string">&#x27;url-loader?limit=8890&amp;outputPath=images&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,<span class="attr">use</span>:[<span class="string">&#x27;babel-loader&#x27;</span>],<span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;<span class="comment">//注意必须排除node_modules目录。</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h1><p>SourceMap存储着错误在<code>源文件</code>的位置信息。</p><p>修改<code>webpack.config.js</code>配置文件，开启SourceMap。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./src/index1.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;js/main1.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">//用于指定构建模式，可选值：development、production</span></span><br><span class="line">    <span class="attr">plugins</span>: [htmlPlugin, cleanWebpackPlugin],<span class="comment">//加载并调用插件</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8081</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;<span class="comment">//所有使用第三方文件模块的匹配规则</span></span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">//文件后缀名匹配规则</span></span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>] &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.jpg|png|gif$/</span>, <span class="attr">use</span>: <span class="string">&#x27;url-loader?limit=889&amp;outputPath=images&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: [<span class="string">&#x27;babel-loader&#x27;</span>], <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;<span class="comment">//注意必须排除node_modules目录。</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code> devtool:&#39;eval-source-map&#39;</code></p></blockquote><p>在生成环境下，为了安全建议关闭SourceMap，也可以设置成只定位行号，不暴露源码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtool</span>:<span class="string">&#x27;nosources-source-map&#x27;</span>,</span><br></pre></td></tr></table></figure><p><img src="https://lptexas-cub.github.io/img/post/image-20230727151657456.png" alt="image-20230727151657456"></p><div class="admonition info"><p class="admonition-title">@在webpack中的使用</p><p><code>@</code>表示<code>src</code>目录，如：<code>import xxx from @/css/index.css</code></p></div><h1 id="一键生成webpack项目"><a href="#一键生成webpack项目" class="headerlink" title="一键生成webpack项目"></a>一键生成webpack项目</h1><p>如何自动生成？</p>]]></content>
    
    
    <summary type="html">webpack学习笔记</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Webpack" scheme="https://lptexas.top/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Web APIs 学习笔记1</title>
    <link href="https://lptexas.top/posts/765948946/"/>
    <id>https://lptexas.top/posts/765948946/</id>
    <published>2023-07-01T16:00:00.000Z</published>
    <updated>2024-10-04T09:02:11.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="什么是Web-API"><a href="#什么是Web-API" class="headerlink" title="什么是Web API?"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction">什么是Web API?</a></h2><h3 id="作用和分类"><a href="#作用和分类" class="headerlink" title="作用和分类"></a>作用和分类</h3><p>使用JavaScript操作HTML和浏览器。</p><p>分为：DOM（文档对象模型）、BOM（浏览器对象模型）</p><div class="admonition note"><p class="admonition-title">DOM对象</p><p>使用JS获取到的标签是一个Object，即DOM对象。</p></div><h2 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM?"></a>什么是DOM?</h2><p>DOM (Document Object Model）文档对象模型是用来呈现以及与任意 HTML 或 XML 文档交互的 API。即：DOM是浏览器提供的一套专门用来操作页面内容的功能。可以实现与用户的交互，如：下拉菜单，点击切换，页面特效等等。</p><h2 id="什么是DOM树？（文档树）"><a href="#什么是DOM树？（文档树）" class="headerlink" title="什么是DOM树？（文档树）"></a>什么是DOM树？（文档树）</h2><p>将HTML文档以树状结构直观的表现出来。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230702175542262.png" alt="image-20230702175542262"></p><p><strong>DOM树很直观的体现了标签与标签之间的关系！</strong></p><h2 id="什么是document？"><a href="#什么是document？" class="headerlink" title="什么是document？"></a>什么是document？</h2><p>document是DOM中的一个对象，且是最大的一个对象。</p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="获取DOM元素的方法"><a href="#获取DOM元素的方法" class="headerlink" title="获取DOM元素的方法"></a>获取DOM元素的方法</h2><p>前两个比较常用。</p><h3 id="选择匹配的第一个元素"><a href="#选择匹配的第一个元素" class="headerlink" title="选择匹配的第一个元素"></a>选择匹配的<code>第一个</code>元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;css选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意需要加单引号<code>‘’</code></p></blockquote><h3 id="选择匹配多个元素"><a href="#选择匹配多个元素" class="headerlink" title="选择匹配多个元素"></a>选择匹配<code>多个</code>元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;css选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="admonition info"><p class="admonition-title">NodeList</p><p>返回的值为数组（NodeList），这是一个伪数组，有长度和索引，但没有pop()，push()等数组方法，想要获取里面的对象，需要通过遍历（for）的方式。</p></div><h3 id="其它方式获取元素"><a href="#其它方式获取元素" class="headerlink" title="其它方式获取元素"></a>其它方式获取元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElemenntById</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElemenntByName</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElemenntByTagName</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElemenntByClassName</span>()</span><br></pre></td></tr></table></figure><h2 id="修改DOM元素的内容"><a href="#修改DOM元素的内容" class="headerlink" title="修改DOM元素的内容"></a>修改DOM元素的内容</h2><blockquote><p>下文的element表示获取到的元素对象。</p></blockquote><h3 id="在-lt-x2F-body-gt-前追加文本"><a href="#在-lt-x2F-body-gt-前追加文本" class="headerlink" title="在&lt;&#x2F;body&gt;前追加文本"></a>在&lt;&#x2F;body&gt;前追加文本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;文本/标签&#x27;</span>)</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">write()</p><p>使用write()追加标签<code>能够</code>被浏览器解析。</p></div><h3 id="更新元素中的文本"><a href="#更新元素中的文本" class="headerlink" title="更新元素中的文本"></a>更新元素中的文本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">innerText</span> = <span class="string">&#x27;文本&#x27;</span></span><br><span class="line">element.<span class="property">innerHTML</span> = <span class="string">&#x27;文本/标签&#x27;</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">innerText()</p><p>使用innerText()追加标签<code>不能够</code>被浏览器解析，而innerHTML可以被解析。</p></div><h2 id="修改DOM元素的属性"><a href="#修改DOM元素的属性" class="headerlink" title="修改DOM元素的属性"></a>修改DOM元素的属性</h2><h3 id="修改常用属性"><a href="#修改常用属性" class="headerlink" title="修改常用属性"></a>修改常用属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.属性 = <span class="string">&#x27;属性值&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="通过style控制样式"><a href="#通过style控制样式" class="headerlink" title="通过style控制样式"></a>通过style控制样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">style</span>.属性 = <span class="string">&#x27;属性值&#x27;</span></span><br></pre></td></tr></table></figure><p>!!! note 关于属性的命名<br>   将<code>横线命名法</code>改为<code>小驼峰命名法</code>，如：background-color改为backgroundColor。</p><h3 id="设置class属性的值"><a href="#设置class属性的值" class="headerlink" title="设置class属性的值"></a>设置class属性的值</h3><blockquote><p>由于class为关键字，要使用className替代</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">className</span> = <span class="string">&#x27;属性值&#x27;</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">设置类名的覆盖问题</p><p>使用className设置类名会将以前的类名都覆盖掉。有3种方式可以解决，第一种，在属性值中保留以前类名的同时添加新类名，如：element.className = '旧类名 新类名'；第二种，使用<code>+=</code>赋值的方式，主要新类名前加个空格，element.className += ' 新类名'；第三中方式，使用<code>classList</code>操作类控制css，见下文。</p></div><h3 id="使用classList设置类"><a href="#使用classList设置类" class="headerlink" title="使用classList设置类"></a>使用classList设置类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;类名&#x27;</span>) </span><br><span class="line">element.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;类名&#x27;</span>) <span class="comment">//切换，即原来有的去掉，没有的添加。</span></span><br></pre></td></tr></table></figure><h1 id="定时器（间隙函数）"><a href="#定时器（间隙函数）" class="headerlink" title="定时器（间隙函数）"></a>定时器（间隙函数）</h1><h2 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h2><p>每间隔一段时间，自动执行一段代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(函数名不加小括号,间隙时间ms) </span><br></pre></td></tr></table></figure><h2 id="关闭定时器"><a href="#关闭定时器" class="headerlink" title="关闭定时器"></a>关闭定时器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名=<span class="built_in">setInterval</span>(函数名,间隙时间)</span><br><span class="line"><span class="built_in">clearInterval</span>(变量名)</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">应用场景</p><p>当某些事件发生时，需要停止定时器，比如当用户鼠标放在轮播图上时。</p></div><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件是指编程时系统内发生的动作或发生的事情。如：用户在网页上点击了一个按钮。</p><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>让程序监听某个事件是否发生，发生后调用某个函数做出响应，也叫注册事件。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a href="https://www.w3school.com.cn/js/js_htmldom_eventlistener.asp">语法</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件&#x27;</span>,函数名,useCapture)</span><br></pre></td></tr></table></figure><p>第一个参数是事件的类型（比如 “click” 或 “mousedown”）。</p><p>第二个参数是当事件发生时我们需要调用的函数。</p><p>第三个参数是布尔值，指定使用事件冒泡还是事件捕获。此参数是可选的。</p><p><strong>注意：</strong>请勿对事件使用 “on” 前缀；请使用 “click” 代替 “onclick”。</p><h2 id="常见的事件"><a href="#常见的事件" class="headerlink" title="常见的事件"></a><a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">常见的事件</a></h2><table><thead><tr><th align="left">事件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onchange</td><td align="left">HTML 元素已被改变</td></tr><tr><td align="left">onclick</td><td align="left">用户点击了 HTML 元素</td></tr><tr><td align="left">onmouseover</td><td align="left">用户把鼠标移动到 HTML 元素上</td></tr><tr><td align="left">onmouseout</td><td align="left">用户把鼠标移开 HTML 元素</td></tr><tr><td align="left">onkeydown</td><td align="left">用户按下键盘按键</td></tr><tr><td align="left">onload</td><td align="left">浏览器已经完成页面加载</td></tr></tbody></table><h2 id="resize事件"><a href="#resize事件" class="headerlink" title="resize事件"></a>resize事件</h2><p>当窗口(window)发生变化时，触发的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.runoob.com/jsref/prop-element-classlist.html">补充一下<code>this</code>的使用</a></p></blockquote><h3 id="移除事件监听"><a href="#移除事件监听" class="headerlink" title="移除事件监听"></a>移除事件监听</h3><p>传统的事件监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br><span class="line">btn.<span class="property">onclick</span>=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>使用EventListener</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件&#x27;</span>,有名回调函数)</span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;事件&#x27;</span>,有名回调函数)</span><br></pre></td></tr></table></figure><h1 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a><a href="https://juejin.cn/post/7191507897879101500">节点关系</a></h1><h2 id="父子兄节点查询"><a href="#父子兄节点查询" class="headerlink" title="父子兄节点查询"></a>父子兄节点查询</h2><p><img src="https://lptexas-cub.github.io/img/post/image-20230712103816555.png" alt="image-20230712103816555"></p><blockquote><p>下文<code>node</code>表示当前节点</p></blockquote><h3 id="查找节点的父节点"><a href="#查找节点的父节点" class="headerlink" title="查找节点的父节点"></a>查找节点的父节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure><h3 id="查找节点的子节点"><a href="#查找节点的子节点" class="headerlink" title="查找节点的子节点"></a>查找节点的子节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">children</span></span><br></pre></td></tr></table></figure><h3 id="查找下一个兄弟节点"><a href="#查找下一个兄弟节点" class="headerlink" title="查找下一个兄弟节点"></a>查找下一个兄弟节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">nextElementSibling</span></span><br></pre></td></tr></table></figure><h3 id="查找前一个兄弟节点"><a href="#查找前一个兄弟节点" class="headerlink" title="查找前一个兄弟节点"></a>查找前一个兄弟节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">previousElementSibling</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">节点关系</p><p>子节点往往有属性节点、文本节点、标签节点，注意不要忽略了某个节点！下文中的<code>Element</code>限制了只在标签节点中进行查找。更多见：<a href="https://juejin.cn/post/7191507897879101500">节点的关系和内部操作</a>。</p></div><h2 id="节点增加"><a href="#节点增加" class="headerlink" title="节点增加"></a>节点增加</h2><h3 id="创建一个标签"><a href="#创建一个标签" class="headerlink" title="创建一个标签"></a>创建一个标签</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 子元素=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;标签名&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="将标签放在某个位置"><a href="#将标签放在某个位置" class="headerlink" title="将标签放在某个位置"></a>将标签放在某个位置</h3><h4 id="插入到父元素的最后一个子元素（追加）"><a href="#插入到父元素的最后一个子元素（追加）" class="headerlink" title="插入到父元素的最后一个子元素（追加）"></a>插入到父元素的最后一个子元素（追加）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">appendChild</span>(子元素)</span><br></pre></td></tr></table></figure><h4 id="插入到父元素的某个子元素前面"><a href="#插入到父元素的某个子元素前面" class="headerlink" title="插入到父元素的某个子元素前面"></a>插入到父元素的某个子元素前面</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">insertBefore</span>(子元素,哪个子元素前面)</span><br></pre></td></tr></table></figure><div class="admonition info"><p class="admonition-title">insertBefore</p><p>常常会用到<code>父元素.children[i]</code>的方式，来确定第二个参数的元素位置。</p></div><h2 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">cloneNode</span>(布尔值)</span><br></pre></td></tr></table></figure><p>布尔值为true，表示克隆时包含后代节点一起克隆；为false，不可龙后代节点。默认为false。</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>从父元素中来删除！不存在父子关系删除失败。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">removeChild</span>(要删除的元素)</span><br></pre></td></tr></table></figure><p>第二种方法<a href="https://www.w3school.com.cn/jsref/met_element_remove.asp"><code>元素.remove()</code></a></p><h1 id="时间对象"><a href="#时间对象" class="headerlink" title="时间对象"></a>时间对象</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>() #返回当前时间</span><br><span class="line"><span class="keyword">let</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>(’<span class="number">2023</span>-<span class="number">7</span>-<span class="number">1</span>‘) #返回指定日期</span><br><span class="line"><span class="keyword">let</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>(’<span class="number">2023</span>-<span class="number">7</span>-<span class="number">1</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">00</span>‘) #返回指定日期</span><br></pre></td></tr></table></figure><p><img src="https://lptexas-cub.github.io/img/post/image-20230714103637902.png" alt="image-20230714103637902"></p><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>时间戳是指从1970年1月1日0时0分0秒到现在的时间差，换算成<code>毫秒数</code>。</p><h2 id="获取时间戳的方法"><a href="#获取时间戳的方法" class="headerlink" title="获取时间戳的方法"></a>获取时间戳的方法</h2><p>三种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> time=date.<span class="title function_">getTime</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">#只能得到当前的</span><br><span class="line"><span class="keyword">let</span> time=<span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br></pre></td></tr></table></figure><h2 id="时间戳转换"><a href="#时间戳转换" class="headerlink" title="时间戳转换"></a>时间戳转换</h2><p><img src="https://lptexas-cub.github.io/img/post/image-20230714110149696.png" alt="image-20230714110149696"></p><p>注意要先换算出秒！即：<code>总秒数=时间戳/1000</code></p><h1 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h1><p>浏览器是如何进行界面渲染的？</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230716114801549.png" alt="image-20230716114801549"></p><ol><li><p>HTML解析器解析HTML生成<code>DOM树</code></p></li><li><p>CSS解析器解析CSS生成<code>样式规则</code></p></li><li><p>根据DOM树和样式规则生成<code>渲染树</code></p></li><li><p>进行布局Layout（重排&#x2F;回流）：根据渲染树，得到节点的几何信息（位置和大小）</p></li><li><p>进行绘制Painting：根据计算和获取的信息对整个页面进行绘制</p></li><li><p>Display：显示在页面上</p></li></ol><h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><p>当Render Tree（渲染树）中部分或者全部元素的尺寸、结构、布局等发生变化时，浏览器就会重新渲染部分或全部文档的过程，称为回流。</p><h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>由于节点（元素）的样式发生改变但不影响它在文档流中的位置和布局时，称为重绘。</p><div class="admonition note"><p class="admonition-title">重绘和回流</p><p>重绘不一定会引起回流，但回流一定会引起重绘。</p></div><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p>事件对象包含了事件触发时的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中的<code>e</code>参数为事件对象。</p><h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>记录了用户按下的键盘值。</p><p>现在不提倡使用<a href="https://www.cnblogs.com/lxwphp/p/9548823.html">KeyCode</a>。</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>获取当前的事件类型。如：‘click’，‘mouseenter’等</p><h3 id="clientX-x2F-clientY"><a href="#clientX-x2F-clientY" class="headerlink" title="clientX&#x2F;clientY"></a>clientX&#x2F;clientY</h3><p>获取光标相对于浏览器可见窗左上角的位置。</p><h3 id="offsetX-x2F-offsetY"><a href="#offsetX-x2F-offsetY" class="headerlink" title="offsetX&#x2F;offsetY"></a>offsetX&#x2F;offsetY</h3><p>获取光标相对于当前DOM元素左上角的位置。</p><h3 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault"></a>preventDefault</h3><p>阻止默认行为，比如：a标签的跳转行为，表单域的提交功能。</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>可以得到被点击的元素对象。</p><h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p>事件流是指事件完整执行过程中的流动路径。</p><h2 id="事件捕获和事件冒泡"><a href="#事件捕获和事件冒泡" class="headerlink" title="事件捕获和事件冒泡"></a>事件捕获和事件冒泡</h2><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>当一个元素的事件被触发，将从DOM的根元素开始执行事件。（从外到内）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">DOM</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件&#x27;</span>,回调函数,是否开启捕获布尔值)</span><br></pre></td></tr></table></figure><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>当一个元素的事件被触发，将从被点击的元素开始，依次向上调用所有父级元素的同名事件。</p><h2 id="阻止事件流动"><a href="#阻止事件流动" class="headerlink" title="阻止事件流动"></a>阻止事件流动</h2><p>关闭事件捕获和事件冒泡，让事件只在被点击的元素上发生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事件对象.<span class="title function_">stopPropagation</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;事件&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="mouseover和mouseenter的区别"><a href="#mouseover和mouseenter的区别" class="headerlink" title="mouseover和mouseenter的区别"></a><code>mouseover</code>和<code>mouseenter</code>的区别</h3><p>mouseover和mouseout默认具有冒泡效果</p><p>mouseenter和mouseleave不具有冒泡效果</p><p>在需要使用鼠标经过事件时，推荐使用<code>mouseenter</code>事件实现。</p><h1 id="滚动事件和加载事件"><a href="#滚动事件和加载事件" class="headerlink" title="滚动事件和加载事件"></a>滚动事件和加载事件</h1><h2 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h2><p>监听整个页面或者某个元素的滚动事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h2><h2 id="load事件"><a href="#load事件" class="headerlink" title="load事件"></a>load事件</h2><p>常用于在加载完页面后再加载外部资源。也可以用在某个元素上，一般是需要花时间加载的元素比如图片。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line">元素..<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="DOMContentLoaded事件"><a href="#DOMContentLoaded事件" class="headerlink" title="DOMContentLoaded事件"></a>DOMContentLoaded事件</h2><p>相对于<code>load</code>事件，无需等待样式表、图像完全加载。监听页面DOM树加载完毕。</p><p>监听对象为<code>document</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="scroll家族"><a href="#scroll家族" class="headerlink" title="scroll家族"></a>scroll家族</h1><p>获取内容的宽高等。</p><h2 id="scrollWidth和scrollHeight属性"><a href="#scrollWidth和scrollHeight属性" class="headerlink" title="scrollWidth和scrollHeight属性"></a>scrollWidth和scrollHeight属性</h2><p>这两个属性返回的是元素<code>内容</code>的宽高，<code>不带单位</code>。</p><div class="admonition note"><p class="admonition-title">获取html标签</p><p>使用``document.documentElement.xxx<code>的方式获取</code><html>`。</p></div><h2 id="scrollTop和scrollLeft属性"><a href="#scrollTop和scrollLeft属性" class="headerlink" title="scrollTop和scrollLeft属性"></a>scrollTop和scrollLeft属性</h2><p>scrollTop表示的是头部被滚动的距离，即竖向滚动条移动的距离；类似的scrollLeft表示左边被滚动的距离。<code>不带单位</code>。</p><p>可以用于获取，也可以用于赋值以实现<code>回到顶部/底部的功能</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> html=<span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(html.<span class="property">scrollTop</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="offset家族"><a href="#offset家族" class="headerlink" title="offset家族"></a>offset家族</h1><p>获取元素的自身宽高，包含元素自身设置的宽高、padding、border。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回该元素自身的宽高，包含padding、border</span></span><br><span class="line">元素.<span class="property">offsetWidth</span></span><br><span class="line">元素.<span class="property">offsetHeight</span></span><br><span class="line"><span class="comment">//返回该元素的相对于父级元素的位置，没有父级元素以body为准</span></span><br><span class="line">元素.<span class="property">offsetLeft</span></span><br><span class="line">元素.<span class="property">offsetTop</span></span><br><span class="line"><span class="comment">//返回该元素的父级元素</span></span><br><span class="line">元素.<span class="property">offsetParent</span></span><br></pre></td></tr></table></figure><h1 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h1><p>获取元素当前可见内容的宽高。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回该元素自身的宽高，不包含padding、border、滚动条</span></span><br><span class="line">元素.<span class="property">clientWidth</span></span><br><span class="line">元素.<span class="property">clientHeight</span></span><br><span class="line"><span class="comment">//返回元素左边框、上边框的大小</span></span><br><span class="line">元素.<span class="property">clientLeft</span></span><br><span class="line">元素.<span class="property">clientTop</span></span><br><span class="line"><span class="comment">//返回该元素的父级元素</span></span><br><span class="line">元素.<span class="property">clientParent</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Web APIs 学习笔记</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Javascript" scheme="https://lptexas.top/tags/Javascript/"/>
    
    <category term="Web APIs" scheme="https://lptexas.top/tags/Web-APIs/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开启热部署</title>
    <link href="https://lptexas.top/posts/2298776235/"/>
    <id>https://lptexas.top/posts/2298776235/</id>
    <published>2023-04-15T16:00:00.000Z</published>
    <updated>2024-10-04T09:01:35.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于热部署"><a href="#关于热部署" class="headerlink" title="关于热部署"></a>关于热部署</h1><p>重启（Restart)∶自定义开发代码，包含类、页面、配置文件等，加载位置restart类加载器<br>重载（ReLoad) : jar包，加载位置base类加载器</p><h1 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h1><h2 id="添加坐标"><a href="#添加坐标" class="headerlink" title="添加坐标"></a>添加坐标</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="重新Build项目"><a href="#重新Build项目" class="headerlink" title="重新Build项目"></a>重新Build项目</h2><blockquote><p>Eclipse中开启了Build Automatically就不用手动再Build了</p></blockquote><h2 id="重新启动项目"><a href="#重新启动项目" class="headerlink" title="重新启动项目"></a>重新启动项目</h2><blockquote><p>完成！</p></blockquote><p>在代码中的改动都会被Spring容器检测到，然后重启服务器。后面就不需要手动重启了！</p><h2 id="设置热部署的范围"><a href="#设置热部署的范围" class="headerlink" title="设置热部署的范围"></a>设置热部署的范围</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#配置热部署</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="comment">#配置哪些文件的改动不进行热部署,如：static/**</span></span><br></pre></td></tr></table></figure><h2 id="禁用热部署"><a href="#禁用热部署" class="headerlink" title="禁用热部署"></a>禁用热部署</h2><blockquote><p><code>enable</code>属性</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#配置热部署</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="comment">#配置哪些文件的改动不进行热部署,如：static/**</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>!!! info 注意<br>   停用热部署的配置方式有很多种，还可以使用系统属性等等配置方式，不同的配置优先级不同。<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#boot-features-external-config">-&gt;官方文档说明&lt;-</a></p><br>]]></content>
    
    
    <summary type="html">SpringBoot学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="SpringBoot" scheme="https://lptexas.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java之输入输出流</title>
    <link href="https://lptexas.top/posts/1306940380/"/>
    <id>https://lptexas.top/posts/1306940380/</id>
    <published>2023-04-09T16:00:00.000Z</published>
    <updated>2024-10-04T08:17:19.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;parent&quot;</span>,<span class="string">&quot;child&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h1><p>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileInputStream 是InputStream子类，以FileInputStream 为例进行文件读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>();</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fis.read(b); <span class="comment">//读取文件中的数据，保存到字节数组中，b为字节数组</span></span><br><span class="line">fis.close(); <span class="comment">//关闭输入流</span></span><br></pre></td></tr></table></figure><h1 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutStream fos=<span class="keyword">new</span> <span class="title class_">FileOutStream</span>(f);</span><br><span class="line">FileOutStream fos=<span class="keyword">new</span> <span class="title class_">FileOutStream</span>(f,<span class="literal">true</span>); <span class="comment">//第二个参数表示是否开启append拼接模式</span></span><br></pre></td></tr></table></figure><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fos.write(b); <span class="comment">//将字节数组中的数据，写入文件</span></span><br><span class="line">fos.close(); <span class="comment">//关闭输出流</span></span><br></pre></td></tr></table></figure><h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><p>使用<code>字节数组</code>存储字节流，实现写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] b=<span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>)f.length()];</span><br></pre></td></tr></table></figure><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><blockquote><p>Reader字符输入流，Writer字符输出流，专门用于字符的形式读取和写入数据。</p></blockquote><p>使用<code>字符数组</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] c = <span class="keyword">new</span> <span class="title class_">char</span>[(<span class="type">int</span>) f.length()];</span><br></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>FileReader 是Reader子类，以FileReader 为例进行文件读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileReader fr=<span class="keyword">new</span> <span class="title class_">FileReader</span>(f);</span><br></pre></td></tr></table></figure><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fr.read(c); <span class="comment">//将字符流写入字符数组</span></span><br><span class="line">fr.close();</span><br></pre></td></tr></table></figure><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileWriter fw=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(f);</span><br></pre></td></tr></table></figure><h3 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fw.read(c); <span class="comment">//将字符流写入字符数组</span></span><br><span class="line">fw.close();</span><br></pre></td></tr></table></figure><h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><p>FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用InputStreamReader读取UTF-8编码的文本文件</span></span><br><span class="line">FileInputStream fis=<span class="keyword">new</span> <span class="title class_">FileInputSteam</span>(f);</span><br><span class="line"><span class="type">char</span>[] c=<span class="keyword">new</span> <span class="title class_">char</span>[(<span class="type">int</span>)f.length()];</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f),Charset.forName(<span class="string">&quot;UTF-8&quot;</span>) ;</span><br><span class="line">isr.read(c);</span><br></pre></td></tr></table></figure><h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><p><strong>字节流和字符流的弊端</strong><br>在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。</p><p>为了解决以上弊端，采用缓存流。<br>缓存流在读取的时候，<strong>会一次性读较多的数据到缓存中</strong>，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。</p><h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><blockquote><p>缓存流必须建立在一个存在的流的基础上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f);</span><br><span class="line">BufferedReader bf=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br></pre></td></tr></table></figure><h3 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bf.readline(); <span class="comment">//一次读入一行</span></span><br></pre></td></tr></table></figure><h2 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f);</span><br><span class="line">PrintWriter pw=<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw);</span><br></pre></td></tr></table></figure><h3 id="常用方法-5"><a href="#常用方法-5" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pw.println(<span class="string">&quot;字符串&quot;</span>); <span class="comment">//一次写入一行</span></span><br><span class="line">pw.flush();  <span class="comment">//立即把数据写入到硬盘</span></span><br></pre></td></tr></table></figure><h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p>使用数据流的writeUTF()和readUTF() 可以进行数据的<strong>格式化顺序读写</strong></p><h2 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a>DataInputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fis);</span><br></pre></td></tr></table></figure><h3 id="常用方法-6"><a href="#常用方法-6" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> b= dis.readBoolean();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> dis.readUTF();</span><br></pre></td></tr></table></figure><h2 id="DataOutputStream"><a href="#DataOutputStream" class="headerlink" title="DataOutputStream"></a>DataOutputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fos);</span><br></pre></td></tr></table></figure><h3 id="常用方法-7"><a href="#常用方法-7" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dos.writeBoolean(布尔值);</span><br><span class="line">dos.writeInt(整数);</span><br><span class="line">dos.writeUTF(<span class="string">&quot;字符串&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h1><p>对象流指的是可以直接<strong>把一个对象以流的形式</strong>传输给其他的介质，比如硬盘。</p><p>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现<code>Serializable接口</code>。</p><h1 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h1><blockquote><p>用于获取控制台输入，常常与Scanner结合使用。</p></blockquote>]]></content>
    
    
    <summary type="html">学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="输入输出流" scheme="https://lptexas.top/tags/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Java框架之Mybatis</title>
    <link href="https://lptexas.top/posts/2135279175/"/>
    <id>https://lptexas.top/posts/2135279175/</id>
    <published>2023-03-27T16:00:00.000Z</published>
    <updated>2024-10-04T08:17:13.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Mybatis？"><a href="#什么是Mybatis？" class="headerlink" title="什么是Mybatis？"></a>什么是Mybatis？</h1><p>Mybatis是一款优秀的持久层框架，用于简化JDBC开发。</p><h1 id="传统JDBC开发的缺点"><a href="#传统JDBC开发的缺点" class="headerlink" title="传统JDBC开发的缺点"></a>传统JDBC开发的缺点</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">String url=<span class="string">&quot;jdbc:mysql://192.168.31.5:3306/mydb?characterEncoding=utf-8&quot;</span>;</span><br><span class="line">String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">String password=<span class="string">&quot;password&quot;</span>;</span><br><span class="line">conn=DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(<span class="string">&quot;select * from user&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123; <span class="comment">//遍历结果</span></span><br><span class="line">System.out.println(rs.getString(<span class="string">&quot;user_name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>硬编码 &#x3D;&gt; 将字符串放到代码外</p><ul><li>注册驱动 </li><li>获取连接</li><li>SQL语句</li></ul></li><li><p>操作繁琐</p></li></ol><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">快速入门</a></h1><h2 id="普通mybatis项目"><a href="#普通mybatis项目" class="headerlink" title="普通mybatis项目"></a>普通mybatis项目</h2><ol><li><h4 id="创建表，添加数据"><a href="#创建表，添加数据" class="headerlink" title="创建表，添加数据"></a>创建表，添加数据</h4></li><li><h4 id="定义pojo类"><a href="#定义pojo类" class="headerlink" title="定义pojo类"></a>定义pojo类</h4></li></ol><blockquote><p>成员变量对应数据库中的字段，注意类型也要。</p><p>设置getter和setter方法，养成习惯重写toString()方法。<br>3. 创建模块，导入坐标（maven项目）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><h4 id="配置核心配置文件mybatis-config-xml"><a href="#配置核心配置文件mybatis-config-xml" class="headerlink" title="配置核心配置文件mybatis-config.xml"></a>配置核心配置文件<code>mybatis-config.xml</code></h4></li></ol><blockquote><p>配置文件解决了<code>硬编码</code>的问题</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mappers 元素则包含了一组映射器（mapper），这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。</p><p>!!! info mapper命名规范<br>   一般习惯为<code>表名+Mapper.xml</code>。</p><ol start="5"><li><h4 id="配置Mapper，SQL映射文件"><a href="#配置Mapper，SQL映射文件" class="headerlink" title="配置Mapper，SQL映射文件"></a>配置Mapper，SQL映射文件</h4></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.Mapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from table where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><h4 id="加载核心配置文件，获取SqlSessionFactory对象"><a href="#加载核心配置文件，获取SqlSessionFactory对象" class="headerlink" title="加载核心配置文件，获取SqlSessionFactory对象"></a>加载核心配置文件，获取SqlSessionFactory对象</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure><ol start="7"><li>获取SqlSession对象或Map对象，执行SQL语句，操作数据库</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//操作session执行sql语句</span></span><br><span class="line"><span class="comment">//如：session.selectList(&quot;selectTable&quot;)</span></span><br></pre></td></tr></table></figure><ol start="8"><li><h4 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h4></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.close()</span><br></pre></td></tr></table></figure><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><blockquote><p>mapper中进行配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">    insert into category_ ( name ) values (#&#123;name&#125;)   </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">    delete from category_ where id= #&#123;id&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;_int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">    select * from   category_  where id= #&#123;id&#125;   </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">    update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;   </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategory&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">    select * from   category_     </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>    </span><br></pre></td></tr></table></figure><blockquote><p>java代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">c.setName(<span class="string">&quot;新增加的Category&quot;</span>);</span><br><span class="line">session.insert(<span class="string">&quot;addCategory&quot;</span>,c);</span><br><span class="line">session.commit();</span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a><a href="https://blog.csdn.net/qq_42662759/article/details/116757078">Spring整合Mybatis</a></h2><ol start="0"><li>创建Maven项目，导入依赖</li></ol><blockquote><p>依赖清单</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Spring核心</span><br><span class="line">MyBatis核心</span><br><span class="line">MySQL JDBC驱动</span><br><span class="line">log4j日志</span><br><span class="line">JUnit单元测试</span><br><span class="line">Lombok插件</span><br><span class="line">Druid数据库连接池</span><br><span class="line">Spring和的MyBatis整合包</span><br><span class="line">Spring和ORM框架的整合包—此依赖项会自动导入spring-orm，spring-jdbc，spring-tx三个jar包</span><br><span class="line">Spring和JUnit的整合包</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Junit测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis核心Jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Lombok工具 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring核心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring-test测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slf4j日志包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid阿里的数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring整合ORM --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring整合MyBatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>建表，新建pojo类包和实体类</li></ol><blockquote><p>以银行账户为例</p></blockquote><p>MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 建表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `account_name` <span class="type">char</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`,`account_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;5000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `account` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;5000&#x27;</span>);</span><br></pre></td></tr></table></figure><p>com.pojo.account</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"><span class="meta">@Data</span>  <span class="comment">//使用注解自动生成getter和setter方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String accountName;</span><br><span class="line"><span class="keyword">private</span> <span class="type">float</span> money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置持久层，新建mapper包和对应实体类<code>(AccountMapper)</code>的Mapper接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>新建resource资源文件夹（用于存放配置文件），新建jdbc.properties，设置数据库驱动以及连接信息</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://<span class="number">192.168</span><span class="number">.31</span><span class="number">.5</span>:<span class="number">3306</span>/managerSys?serverTimezone=GMT%<span class="number">2B8</span>&amp;useSSL=<span class="literal">false</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;allowPublicKeyRetrieval=<span class="literal">true</span></span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><ol start="4"><li>新建mybatis.xml配置文件</li></ol><blockquote><p>在spring中集成</p></blockquote><p>使用Spring集成Mybatis<code>可以摒弃</code>mybatis.xml配置文件，<code>也可以只设置如下内容</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启延迟加载 该项默认为false，即所有关联属性都会在初始化时加载</span></span><br><span class="line"><span class="comment">true表示延迟按需加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>默认内容</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>新建<a href="https://so.csdn.net/so/search?q=log4j&spm=1001.2101.3001.7020">log4j</a>.properties日志配置文件（可选）</li></ol><blockquote><p>内容为日志的输出类型和其他配置信息</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout </span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout </span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p %d %C: %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.java.sql.ResultSet=INFO</span><br><span class="line">log4j.logger.org.apache=INFO</span><br><span class="line">log4j.logger.java.sql.Connection=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure><ol start="5"><li>新建对应实体类<code>（Account）</code>的映射文件mapper.xml<code>(AccountMapper.xml)</code></li></ol><ul><li>在resources下新建包</li><li>包名和上方的mapper接口的包名要一致</li></ul><p><img src="https://lptexas-cub.github.io/img/post/image-20230330105448655.png" alt="image-20230330105448655"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace属性相当于映射文件的名称 属性值任意</span></span><br><span class="line"><span class="comment">    接口代理方式，属性值要写成接口的完整类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   &lt;cache</span></span><br><span class="line"><span class="comment">    size=&quot;1024&quot; //缓存对象的最大个数，默认是1024个</span></span><br><span class="line"><span class="comment">    eviction=&quot;LRU&quot;  //缓存对象的回收策略，默认是LRU算法</span></span><br><span class="line"><span class="comment">      //LRU Least Recently Used 最近最少使用，移除最长时间不被使用的对象</span></span><br><span class="line"><span class="comment">      //FIFO First In First Out 先进先出，按对象进入缓存的顺序来移除它们</span></span><br><span class="line"><span class="comment">      //SOFT 软引用，移除基于垃圾回收器状态和软引用规则的对象</span></span><br><span class="line"><span class="comment">      //WEAK 弱引用，更积极地移除基于垃圾收集器和弱引用规则的对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    flushInterval=&quot;60000&quot; //自动清空缓存的间隔时间，单位为毫秒，默认是0，表示无穷大</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    readOnly=&quot;true&quot;  //缓存对象是否只读，默认为false</span></span><br><span class="line"><span class="comment">      //true 从缓存中获取的数据都是只读的，为了加快查询速度，直接返回数据在缓存中的引用，缺点是不安全</span></span><br><span class="line"><span class="comment">      //false 从缓存中获取的数据可能会被修改，为了安全起见，利用序列化和反序列的技术克隆一份新的数据返回，缺点是速度慢</span></span><br><span class="line"><span class="comment">    /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启MyBatis自带的二级缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;1024&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- resultType属性指定结果的类型的完整包名</span></span><br><span class="line"><span class="comment">        目前写的是user是因为后期会起一个别名，</span></span><br><span class="line"><span class="comment">        默认的别名就是类名的首字母小写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAcountList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>在Mapper接口<code>（AccountMapper接口）</code>中编写映射文件对应的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pojo.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line">List&lt;Account&gt; <span class="title function_">findAccountList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>配置spring主配置文件<code>（applicationContext.xml或SpringConfig配置类）</code></li></ol><blockquote><p>applicationContext.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;context:component-scan base-package=&quot;com.bean&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载数据库连接信息的属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Druid数据源的Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SessionFactory的Bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定MyBatis配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给实体类起别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">&quot;com.pojo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置mapper接口的扫描器，将Mapper接口的实现类自动注入到IoC容器中 实现类Bean的名称默认为接口类名的首字母小写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- basePackage属性指定自动扫描mapper接口所在的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li>测试</li></ol><h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><blockquote><p>方法一</p></blockquote><ol><li>创建SpringBoot项目，勾选<code>Mybatis Framework</code>和<code>Mysql Driver</code></li></ol><div class="admonition note"><p class="admonition-title">“”</p><p>用什么勾选什么</p></div><ol start="2"><li>配置连接信息  application.properties或application.yml</li></ol><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">    <span class="attr">datasource:</span> </span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p> application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#暂时不介绍</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>定义pojo类</p></li><li><p>定义mapper的接口类和映射配置</p></li></ol><p>增删改查在接口中定义的方法上实现，可以采用配置文件的形式，也可以采用注解的形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;...&quot;)</span></span><br><span class="line">    &lt;pojo类&gt; listAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><blockquote><p>方法二，使用Mybatis Plus</p></blockquote><ol><li><p>创建SpringBoot项目，勾选<code>Mysql Driver</code></p></li><li><p>在pom.xml中手动导入<a href="https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter"><code>Mybatis Plus</code></a></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>定义pojo类</li><li>定义mapper接口类和映射配置</li></ol><p>但是！不需要再手动写对应的方法了，直接继承<code>BaseMapper&lt;泛型&gt;</code>（泛型为定义的pojo类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt;&#123;</span><br><span class="line">    <span class="comment">//不用再写方法啦~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">自用的学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="Mybatis" scheme="https://lptexas.top/tags/Mybatis/"/>
    
    <category term="Spring" scheme="https://lptexas.top/tags/Spring/"/>
    
    <category term="SpringBoot" scheme="https://lptexas.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring相关原理总结</title>
    <link href="https://lptexas.top/posts/3306600581/"/>
    <id>https://lptexas.top/posts/3306600581/</id>
    <published>2023-03-20T16:00:00.000Z</published>
    <updated>2024-10-04T09:01:07.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeanFactory和ApplicationContext"><a href="#BeanFactory和ApplicationContext" class="headerlink" title="BeanFactory和ApplicationContext"></a><a href="https://juejin.cn/post/7166381640036384804">BeanFactory和ApplicationContext</a></h1><h2 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h2><table><thead><tr><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>早期接口，被称为Spring的Bean工厂</td><td>后期更高级接口，称之为Spring 容器</td></tr><tr><td>BeanFactory的API更偏向底层</td><td>API大多数是对BeanFactory底层API的封装；<br />且有更多的拓展功能：监听功能、国际化功能等</td></tr><tr><td>封装了Bean创建的主要逻辑和功能</td><td>继承了BeanFactory的功能</td></tr><tr><td>Bean的初始化时机不同，原始BeanFactory是在首次调用getBean时才进行Bean的创建</td><td>ApplicationContext则是配置文件加载，容器一创建就将Bean都实例化并初始化好。</td></tr></tbody></table><h2 id="在Spring基础环境下，常用的三个ApplicationContext作用"><a href="#在Spring基础环境下，常用的三个ApplicationContext作用" class="headerlink" title="在Spring基础环境下，常用的三个ApplicationContext作用"></a>在Spring基础环境下，常用的三个ApplicationContext作用</h2><table><thead><tr><th>实现类</th><th>功能描述</th></tr></thead><tbody><tr><td><strong>ClassPathXmlApplicationContext</strong></td><td><strong>加载类路径下的xml配置的ApplicationContext</strong></td></tr><tr><td><strong>FileSystemXmlApplicationContext</strong></td><td><strong>加载磁盘路径下的xml配置的ApplicationContext</strong></td></tr><tr><td><strong>AnnotationConfigApplicationContext</strong></td><td><strong>加载注解配置类的ApplicationContext</strong></td></tr></tbody></table><h2 id="在Spring的web环境下，常用的两个ApplicationContext作用"><a href="#在Spring的web环境下，常用的两个ApplicationContext作用" class="headerlink" title="在Spring的web环境下，常用的两个ApplicationContext作用"></a>在Spring的web环境下，常用的两个ApplicationContext作用</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>实现类</th><th>功能描述</th></tr></thead><tbody><tr><td>XmlWebApplicationContext</td><td>web环境下，加载类路径下的xml配置的ApplicationContext</td></tr><tr><td>AnnotationConfigWebApplicationContext</td><td>web环境下，加载磁盘路径下的xml配置的ApplicationContext</td></tr></tbody></table><h1 id="InitializingBean-接口"><a href="#InitializingBean-接口" class="headerlink" title="InitializingBean 接口"></a><a href="https://www.cnblogs.com/study-everyday/p/6257127.html">InitializingBean 接口</a></h1><blockquote><p>完成一些Bean的初始化操作</p></blockquote><h2 id="实现InitializingBean接口与在配置文件中指定init-method有什么不同？"><a href="#实现InitializingBean接口与在配置文件中指定init-method有什么不同？" class="headerlink" title="实现InitializingBean接口与在配置文件中指定init-method有什么不同？"></a>实现InitializingBean接口与在配置文件中指定init-method有什么不同？</h2><p>如果同时实现了InitializingBean接口和init-method，那么系统会先调用InitializingBean再调用init-method指定的初始化方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>1：spring为bean提供了两种初始化bean的方式，实现InitializingBean接口，实现afterPropertiesSet方法，或者在配置文件中同过init-method指定，两种方式<code>可以同时使用</code></p><p>2：实现InitializingBean接口是直接调用afterPropertiesSet方法，比通过反射调用init-method指定的方法<code>效率相对来说要高点</code>。但是init-method方式消除了对spring的依赖</p><p>3：<code>如果调用afterPropertiesSet方法时出错，则不调用init-method指定的方法</code>。</p><h2 id="Spring主要的实例化方式"><a href="#Spring主要的实例化方式" class="headerlink" title="Spring主要的实例化方式"></a>Spring主要的实例化方式</h2><ul><li><p>构造方式实例化：底层通过构造方法对Bean进行实例化</p><ul><li>无参构造方法实例化</li><li>有参构造方法实例化<ul><li><constructor-arg> 添加参数</li></ul></li></ul></li><li><p>工厂方式实例化：底层通过调用自定义的工厂方法对Bean进行实例化</p><ul><li>静态工厂方法实例化Bean<ul><li>直接配置工厂对象及其静态方法配置</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> &#123;</span><br><span class="line">    <span class="comment">// 静态工厂方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDaoImpl <span class="title function_">userDaoImpl</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="comment">// 可以在此编写一些其他逻辑代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.it.factory.UserDaoFactoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小🐕&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实例工厂方法实例化Bean<ul><li>先有工厂对象，再用工厂对象去调用非静态方法</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置实例工厂Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoFactoryBean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.it.factory.UserDaoFactoryBean2&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置实例工厂Bean的哪个方法作为工厂方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl2&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userDaoFactoryBean2&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;userDaoImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小🐱&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean2</span> &#123;</span><br><span class="line">    <span class="comment">// 非静态工厂方法</span></span><br><span class="line">    <span class="keyword">public</span>  UserDaoImpl <span class="title function_">userDaoImpl2</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="comment">// 可以在此编写一些其他逻辑代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现FactoryBean规范延迟实例化Bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean3</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">     <span class="keyword">return</span> UserDao.class;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.it.factory.UserDaoFactoryBean3&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Bean-实例化的基本流程"><a href="#Bean-实例化的基本流程" class="headerlink" title="Bean 实例化的基本流程"></a>Bean 实例化的基本流程</h1><p>Spring容器在进行初始化时，会将xml配置的的信息（Bean标签）封装成一个BeanDefinition对象，所有的 BeanDefinition存储到一个名为beanDefinitionMap的Map集合中去，Spring框架在对该Map进行遍历，使用反射创建Bean实例对象，创建好的Bean对象存储在一个名为singletonObjects的Map集合中，当调用getBean方法时则最终从该Map集合中取出Bean实例对象返回。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230324112528550.png" alt="image-20230324112528550"></p><h1 id="自定义命名空间的解析过程"><a href="#自定义命名空间的解析过程" class="headerlink" title="自定义命名空间的解析过程"></a>自定义命名空间的解析过程</h1><h1 id="解决循环引用问题：三级缓存"><a href="#解决循环引用问题：三级缓存" class="headerlink" title="解决循环引用问题：三级缓存"></a>解决循环引用问题：三级缓存</h1><p><img src="https://lptexas-cub.github.io/img/post/image-20230324172845976.png" alt="image-20230324172845976"></p><p><img src="https://lptexas-cub.github.io/img/post/Spring%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98%E6%BA%90%E7%A0%81%E5%88%A8%E6%9E%90%E6%80%9D%E8%B7%AF.png" alt="Spring三级缓存源码刨析思路"></p>]]></content>
    
    
    <summary type="html">对Spring一些原理性的东西进行总结。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="Spring" scheme="https://lptexas.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>常用IDE的技巧</title>
    <link href="https://lptexas.top/posts/3868235888/"/>
    <id>https://lptexas.top/posts/3868235888/</id>
    <published>2023-03-20T16:00:00.000Z</published>
    <updated>2024-10-04T08:15:59.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h1><h2 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h2><blockquote><p>Alt + Shift + Y</p></blockquote><h2 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h2><blockquote><p>F3 </p></blockquote><h2 id="查看类继承和实现关系"><a href="#查看类继承和实现关系" class="headerlink" title="查看类继承和实现关系"></a>查看类继承和实现关系</h2><blockquote><p> F4或Ctrl + T</p></blockquote><h2 id="查看方法的调用层次"><a href="#查看方法的调用层次" class="headerlink" title="查看方法的调用层次"></a>查看方法的调用层次</h2><blockquote><p>Ctrl+Alt+H    </p></blockquote><h2 id="xml开启代码提示"><a href="#xml开启代码提示" class="headerlink" title="xml开启代码提示"></a>xml开启代码提示</h2><blockquote><p>Alt + &#x2F;</p></blockquote><h2 id="查找某个类文件"><a href="#查找某个类文件" class="headerlink" title="查找某个类文件"></a>查找某个类文件</h2><blockquote><p>Ctrl+Shift+T</p></blockquote>]]></content>
    
    
    <summary type="html">记录一些使用技巧。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="IDE" scheme="https://lptexas.top/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>spring初始化一个项目</title>
    <link href="https://lptexas.top/posts/4267699228/"/>
    <id>https://lptexas.top/posts/4267699228/</id>
    <published>2023-03-19T16:00:00.000Z</published>
    <updated>2024-10-04T09:01:02.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建一个spring项目"><a href="#创建一个spring项目" class="headerlink" title="创建一个spring项目"></a>创建一个spring项目</h1><h2 id="手动导入Jar包"><a href="#手动导入Jar包" class="headerlink" title="手动导入Jar包"></a>手动导入Jar包</h2><blockquote><p>创建普通的Java项目，在lib中Spring导入相关包的方法。</p></blockquote><h3 id="Spring相关jar包"><a href="#Spring相关jar包" class="headerlink" title="Spring相关jar包"></a><a href="https://blog.csdn.net/qq_35080796/article/details/111355515">Spring相关jar包</a></h3><blockquote><p>官方下载链接</p><p><a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">https://repo.spring.io/ui/native/release/org/springframework/spring/</a></p></blockquote><h3 id="spring依赖的日志包"><a href="#spring依赖的日志包" class="headerlink" title="spring依赖的日志包"></a>spring依赖的日志包</h3><blockquote><p><a href="http://commons.apache.org/proper/commons-logging/download_logging.cgi">http://commons.apache.org/proper/commons-logging/download_logging.cgi</a></p></blockquote><h3 id="存放-jar包以及加载"><a href="#存放-jar包以及加载" class="headerlink" title="存放 jar包以及加载"></a>存放 jar包以及加载</h3><blockquote><p>解压后将相关jar包放在工程的lib目录下。</p></blockquote><p><img src="https://lptexas-cub.github.io/img/post/image-20230320172732004.png" alt="image-20230320172732004"></p><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><blockquote><p>在maven项目中导入spring依赖，maven会自动完成jar包下载。</p></blockquote><p><a href="https://blog.csdn.net/daponi/article/details/100731341">四个方面：</a><br>1）spring核心依赖<br>      spring-core、spring-beans、spring-context</p><p>2）spring dao依赖（提供JDBCTemplate）<br>      spring-jdbc、spring-tx</p><p>3）spring web依赖<br>      spring-web、spring-webmvc</p><p>4）spring test依赖<br>      spring-test</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 版本可以自己选择 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-instrument<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="在eclipse中查看源码"><a href="#在eclipse中查看源码" class="headerlink" title="在eclipse中查看源码"></a><a href="https://blog.csdn.net/weixin_43992507/article/details/108093905">在eclipse中查看源码</a></h1><blockquote><p>快捷键是<code>F3</code></p></blockquote><ul><li><a href="https://liaoyongguang.blog.csdn.net/article/details/52137203?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-52137203-blog-108093905.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-52137203-blog-108093905.pc_relevant_default&utm_relevant_index=4">用maven项目，可以看源码？</a></li><li>这里介绍普通Java项目中的spring项目怎么看源码。</li><li>介绍如何使用Gradle查看源码</li></ul><p>下载spring-Frame源码</p><blockquote><p>github</p><p><a href="https://github.com/spring-projects/spring-framework/tags">https://github.com/spring-projects/spring-framework/tags</a></p></blockquote><h2 id="在普通Java项目中查看源码"><a href="#在普通Java项目中查看源码" class="headerlink" title="在普通Java项目中查看源码"></a>在普通Java项目中查看源码</h2><p>下载完源码后，在需要查看源码的地方如某个注解，按<code>F3</code>，在下图页面中，点击<code>Attach Source</code></p><p>使用文件夹的方式，选择上一步下载的源码解压后的目录。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230320201344093.png" alt="image-20230320201344093"></p><h2 id="使用Gradle查看源码"><a href="#使用Gradle查看源码" class="headerlink" title="使用Gradle查看源码"></a>使用Gradle查看源码</h2><h3 id="安装Gradle以及配置环境"><a href="#安装Gradle以及配置环境" class="headerlink" title="安装Gradle以及配置环境"></a>安装Gradle以及配置环境</h3><blockquote><p><a href="https://gradle.org/releases/">https://gradle.org/releases/</a></p></blockquote><p>选择<code>binary-only</code>，下载完毕后解压，配置<code>系统环境变量</code>。</p><h3 id="在eclipse中import源码"><a href="#在eclipse中import源码" class="headerlink" title="在eclipse中import源码"></a>在eclipse中import源码</h3><blockquote><p>File-&gt;Import-&gt;Gradle-&gt;Project root directory</p><p>Project root directory为源码解压后的根目录</p></blockquote><p>导入过程较久，请耐心等待。</p>]]></content>
    
    
    <summary type="html">记录一些模板和链接</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="spring" scheme="https://lptexas.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java之Spring AOP面向切面编程</title>
    <link href="https://lptexas.top/posts/751312367/"/>
    <id>https://lptexas.top/posts/751312367/</id>
    <published>2023-03-12T16:00:00.000Z</published>
    <updated>2024-10-04T09:00:57.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h1><p>用于解决系统层面上的问题，比如：日志、事务、权限等待。它是一种编程范式，不是编程语言。</p><h2 id="优点以及一些概念"><a href="#优点以及一些概念" class="headerlink" title="优点以及一些概念"></a><a href="https://blog.csdn.net/pedro7k/article/details/115415675">优点以及一些概念</a></h2><h3 id="1、AOP的优点"><a href="#1、AOP的优点" class="headerlink" title="1、AOP的优点"></a>1、AOP的优点</h3><ul><li>降低模块之间的耦合度</li><li>使系统更容易扩展</li><li>更好的代码复用</li><li>非业务代码更加集中，不分散，便于统一管理</li><li>业务代码更加简洁纯粹，不掺杂其他的代码的影响</li></ul><h3 id="2、AOP中出现的一些概念"><a href="#2、AOP中出现的一些概念" class="headerlink" title="2、AOP中出现的一些概念"></a>2、<a href="https://blog.csdn.net/Java_xiaobaibai6/article/details/108156664">AOP中出现的一些概念</a></h3><ul><li><h3 id="横切关注点"><a href="#横切关注点" class="headerlink" title="横切关注点"></a><strong>横切关注点</strong></h3></li></ul><p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p><ul><li><h3 id="Aspect-切面"><a href="#Aspect-切面" class="headerlink" title="Aspect 切面"></a>Aspect 切面</h3></li></ul><p>通常是一个类，里面可以定义切入点和通知。</p><ul><li><h3 id="JointPoint-连接点"><a href="#JointPoint-连接点" class="headerlink" title="JointPoint 连接点"></a>JointPoint 连接点</h3></li></ul><p>连接点是在应用执行中能够插入切面的一个点。即程序执行过程中能够应用通知的所有点。</p><p>程序执行过程中明确的点，一般是方法的调用。</p><p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器。</p><ul><li><h3 id="Advice-通知"><a href="#Advice-通知" class="headerlink" title="Advice 通知"></a>Advice 通知</h3></li></ul><p>AOP在特定的切入点上执行的增强处理</p><ul><li><h3 id="Pointcut-切入点"><a href="#Pointcut-切入点" class="headerlink" title="Pointcut 切入点"></a>Pointcut 切入点</h3></li></ul><p>就是带有通知的连接点，在程序中主要体现为<code>书写切入点表达式</code></p><ul><li><h3 id="Weaving-织入"><a href="#Weaving-织入" class="headerlink" title="Weaving 织入"></a><a href="https://zhuanlan.zhihu.com/p/161705262">Weaving 织入</a></h3></li></ul><p>将切面应用到目标对象，并创建新的代理对象的过程。</p><p>切面在指定的连接点被织入到目标对象中。</p><p>在目标对象的生命周期里有多个点可以进行织入:</p><ol><li>编译期:切面在目标类编译时被织入。这种方式需要特殊的编译器。Aspect的织入编译器就是以这种方式织入切面的。</li><li>类加载期:切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器(ClassLoader) ,它可以在目标类被引入应用之前增强该目标类的字节码。AspectJ5的加载时织入(load-time weaving, LTW)就支持以这种方式织入切面。</li><li>运行期:切面在应用运行的某个时刻被织入。一般情况下,在织入切面时, AOP容器会为目标对象动态地创建一个代理对象（动态代理）。Spring AOP就是以这种方式织入切面的。</li></ol><ul><li><h3 id="AOP-Proxy-代理"><a href="#AOP-Proxy-代理" class="headerlink" title="AOP Proxy 代理"></a>AOP Proxy 代理</h3></li></ul><p>AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类</p><h1 id="常见通知"><a href="#常见通知" class="headerlink" title="常见通知"></a><a href="https://zhuanlan.zhihu.com/p/161705262">常见通知</a></h1><p>5种Advice</p><ul><li><p><strong>前置通知（Before）</strong>：在目标方法被调用之前调用通知功能。</p></li><li><p><strong>后置通知（After-returning）</strong>：在目标方法成功执行之后调用通知。目标方法异常不执行。</p></li><li><p><strong>异常通知（After-throwing)）</strong>：在目标方法抛出异常后调用通知。</p></li><li><p><strong>环绕通知（Around）</strong> ：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</p><ul><li>环绕（后）通知，目标方法异常不执行。</li></ul></li><li><p><strong>最终通知（After）</strong>：在目标方法完成之后调用通知，此时不会关心方法的输出是什么。</p></li></ul><h1 id="AOP实践——基于xml的Spring"><a href="#AOP实践——基于xml的Spring" class="headerlink" title="AOP实践——基于xml的Spring"></a>AOP实践——基于xml的Spring</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.9</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">  &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置命名空间"><a href="#配置命名空间" class="headerlink" title="配置命名空间"></a>配置命名空间</h2><blockquote><p>关于aop的三行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">context:xsi</span>=<span class="string">&quot;schemaLocation=http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="AOP的两种配置方式"><a href="#AOP的两种配置方式" class="headerlink" title="AOP的两种配置方式"></a>AOP的两种配置方式</h2><h3 id="第一种，使用-lt-aspect-gt-配置。"><a href="#第一种，使用-lt-aspect-gt-配置。" class="headerlink" title="第一种，使用&lt;aspect&gt;配置。"></a>第一种，使用<code>&lt;aspect&gt;</code>配置。</h3><blockquote><p>这种方式更加灵活。Advice方法的配置用标签实现。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定切入点 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以直接将execution表达式写在pointcut-ref属性中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.service.impl.UserServiceImpl.show())&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定通知 以及类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAdvice&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturnAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了前置增强...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturnAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了后置增强...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了环绕(前)增强...&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> proceedingJoinPoint.proceed();<span class="comment">//执行目标方法（目标方法有可能有返回值所以返回Object）</span></span><br><span class="line">System.out.println(<span class="string">&quot;执行了环绕(后)增强...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> proceed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了异常后增强...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了最终增强...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种，使用-lt-advisor-gt-配置。（开发中基本不用）"><a href="#第二种，使用-lt-advisor-gt-配置。（开发中基本不用）" class="headerlink" title="第二种，使用&lt;advisor&gt;配置。（开发中基本不用）"></a>第二种，使用<code>&lt;advisor&gt;</code>配置。（开发中基本不用）</h3><blockquote><p>需要增强类实现<code>相应的Advice接口或其子接口</code>。</p><p>相比于前者，其Advice方法在advice类中实现，标签只需要引用advice类和切入点即可。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.service.impl.UserServiceImpl.show())&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myAdvice2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice2</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span>, AfterReturningAdvice &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, <span class="meta">@Nullable</span> Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了前置增强...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, Method method, Object[] args, <span class="meta">@Nullable</span> Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行了后置增强...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="两种方法的比较"><a href="#两种方法的比较" class="headerlink" title="两种方法的比较"></a><a href="https://juejin.cn/post/7167151634357698590#heading-22">两种方法的比较</a></h3><p><strong>语法形式不同：</strong></p><ul><li>advisor是通过实现接口来确认通知的类型</li><li>aspect是通过配置确认通知的类型，更加灵活</li></ul><p><strong>可配置的切面数量不同：</strong></p><ul><li>一个advisor只能配置一个固定通知和一个切点表达式</li><li>一个aspect可以配置多个通知和多个切点表达式任意组合</li></ul><p><strong>使用场景不同：</strong></p><ul><li>允许随意搭配情况下可以使用aspect进行配置</li><li>如果通知类型单一、切面单一的情况下可以使用advisor进行配置</li><li>在通知类型已经固定，不用人为指定通知类型时，可以使用advisor进行配置，例如后面要学习的 Spring事务控制的配置</li></ul><h2 id="AOP原理刨析"><a href="#AOP原理刨析" class="headerlink" title="AOP原理刨析"></a>AOP原理刨析</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1rt4y1u7q5?t=1406.6&p=90">Bilibili精准空降</a>，<a href="https://juejin.cn/post/7167151634357698590#heading-27">网友文字版</a></p></blockquote><h1 id="AOP实践——基于注解的Spring"><a href="#AOP实践——基于注解的Spring" class="headerlink" title="AOP实践——基于注解的Spring"></a>AOP实践——基于注解的Spring</h1><h2 id="启用AOP的注解"><a href="#启用AOP的注解" class="headerlink" title="启用AOP的注解"></a>启用AOP的注解</h2><blockquote><p>如果你选择使用配置文件来使用注解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br></pre></td></tr></table></figure><h2 id="切面的配置"><a href="#切面的配置" class="headerlink" title="切面的配置"></a>切面的配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//声明切面</span></span><br><span class="line"><span class="meta">@Before()</span> <span class="comment">//前置增强</span></span><br><span class="line"><span class="meta">@AfterReturning()</span>   <span class="comment">//后置增强</span></span><br><span class="line"><span class="meta">@Around()</span> <span class="comment">//环绕增强</span></span><br><span class="line"><span class="meta">@AfterThrowing(value或pointcut=&quot;&quot;,throwing=&quot;&quot;,...)</span> <span class="comment">//抛出异常后增强</span></span><br><span class="line"><span class="meta">@After()</span>       <span class="comment">//最终增强</span></span><br></pre></td></tr></table></figure><h2 id="切点表达式抽取"><a href="#切点表达式抽取" class="headerlink" title="切点表达式抽取"></a>切点表达式抽取</h2><ol><li>写一个<code>空方法</code>，添加注解<code>@Pointcut(&quot;execution(* com.package.*.*(..))&quot;)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span>&#123;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.package.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>类名.方法名()</code>的语法引用切点表达式</li></ol><div class="admonition note"><p class="admonition-title">“ ”</p><p>注意这种格式只是一种语法规范，而不是Java代码！</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;MyAdvice.myPointcut()&quot;)</span> <span class="comment">// &lt;=&gt; @Before(&quot;execution(* com.package.*.*(..))&quot;)</span></span><br></pre></td></tr></table></figure><h1 id="SpringBoot-AOP实践"><a href="#SpringBoot-AOP实践" class="headerlink" title="SpringBoot AOP实践"></a>SpringBoot AOP实践</h1><h2 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupld</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截方法"><a href="#拦截方法" class="headerlink" title="拦截方法"></a>拦截方法</h2><h3 id="方法一-声明自定义注解进行拦截"><a href="#方法一-声明自定义注解进行拦截" class="headerlink" title="方法一 声明自定义注解进行拦截"></a>方法一 声明自定义注解进行拦截</h3><blockquote><p>新建<code>Annotation</code>包，新建<code>adminOnly</code>接口</p></blockquote><ul><li>在<code>interface</code>前添加<code>@</code>表明定义的是注解</li><li>添加<code>@annotation</code>注解</li></ul><div class="admonition info"><p class="admonition-title">“”</p><p><a href="https://blog.csdn.net/xsp_happyboy/article/details/80987484">自定义注解有哪些参数呢？</a></p></div><ul><li>添加参数<code>@Retention</code>、<code>@Target</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.Annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//指定了注解的生命周期在运行时</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span><span class="comment">//指定了注解应用在方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> adminOnly &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-使用execution表达式拦截"><a href="#方法二-使用execution表达式拦截" class="headerlink" title="方法二 使用execution表达式拦截"></a>方法二 使用execution表达式拦截</h3><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(修饰符pattern 返回值pattern 描述包名方法名(参数) 方法抛出异常pattern)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(public * com.example.controller.*Controller.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">match</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;match()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 前置通知...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">“”</p><p><a href="https://blog.csdn.net/lk7688535/article/details/51989746">*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数</a></p></div><h2 id="切面的管理"><a href="#切面的管理" class="headerlink" title="切面的管理"></a>切面的管理</h2><blockquote><p>新建<code>Aspect</code>包对切面进行统一管理，并新建<code>CheckUserAscpect.java</code>类</p></blockquote><ul><li><code>@Aspect</code>注解声明这个类是一个切面</li><li><code>@Component</code>注解，将这个类标记为Spring容器中的一个Bean，这样就可以使用其它注解了（<code>@Autowired</code>）</li><li>使用<code>CheckUserService.java</code>这个类，实现逻辑处理</li><li>编写切入点，<code>@Pointcut(&quot;@annotation(com.mysqlapi.Annotation.adminOnly)&quot;)</code>，其中参数用来指定在何处插入，此处表示<code>在使用了（自定义）注解@adminOnly处切入</code>，也可以使用<code>execution表达式进行拦截</code><ul><li>切入点方法为<code>checkAdmin()</code></li></ul></li><li>编写通知，决定了何时执行，以<code>@Before</code>通知为例，即在执行操作前，检查用户是否为管理员。<code>@Before(&quot;checkAdmin()&quot;)</code>其中的参数为<code>切入点的方法</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysqlapi.service.CheckUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckUserAscpect</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CheckUserService checkUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.mysqlapi.Annotation.adminOnly)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkAdmin</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;checkAdmin()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">checkUserService.check();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="修改之前的权限验证"><a href="#修改之前的权限验证" class="headerlink" title="修改之前的权限验证"></a>修改之前的权限验证</h1><blockquote><p>UserService.java</p></blockquote><ul><li>在<code>addUser()</code>方法前，添加注解<code>@adminOnly</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysqlapi.service.CheckUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckUserAscpect</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CheckUserService checkUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.mysqlapi.Annotation.adminOnly)&quot;)</span></span><br><span class="line"><span class="comment">//@Pointcut(&quot;execution(public * com.mysqlapi.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkAdmin</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;checkAdmin()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">checkUserService.check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Before(&quot;checkAdmin()&quot;)</span></span><br><span class="line"><span class="comment">//public void before(JoinPoint joinPoint)&#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;[前置通知]&quot;+joinPoint);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>进行单元测试</p></blockquote><p>UserServiceTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysqlapi.holder.CurrentUserHolder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserServiceTest2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">CurrentUserHolder.set(<span class="string">&quot;sds&quot;</span>);</span><br><span class="line">userService.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">CurrentUserHolder.set(<span class="string">&quot;sds&quot;</span>);</span><br><span class="line">userService.addUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样可以实现，权限控制。这种添加自定义注解的方式，比在每有一个方法都要添加<code>check()</code>和<code>throws Exception</code>要更加简洁，但还是需要对每个需要权限的方法添加注解。</p><p><img src="C:\Users\Lappland\AppData\Roaming\Typora\typora-user-images\image-20230313172948144.png" alt="image-20230313172948144"></p><blockquote><p>用execution表达式的单元测试</p></blockquote><p>AspectTestUserService1.java  &lt;– 这个是service包中的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectTestUserService1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;AspectTestUserService1 查找成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;AspectTestUserService1 插入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AspectTestUserService1Test.java &lt;– 单元测试文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AspectTestUserService1Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AspectTestUserService1 aspectTestUserService1;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> &#123;</span><br><span class="line">aspectTestUserService1.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddUser</span><span class="params">()</span> &#123;</span><br><span class="line">aspectTestUserService1.addUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="excution表达式"><a href="#excution表达式" class="headerlink" title="excution表达式"></a>excution表达式</h2><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution (* com.sample.service.impl..*.*(..))</span><br></pre></td></tr></table></figure><p>  整个表达式可以分为五个部分：</p><p>1、execution(): 表达式主体。</p><p> 2、第一个<em>号：表示返回类型，</em>号表示所有的类型。</p><p> 3、包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.sample.service.impl包、子孙包下所有类的方法。</p><p> 4、第二个<em>号：表示类名，</em>号表示所有的类。</p><p> 5、*(..):最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数。</p>]]></content>
    
    
    <summary type="html">自用的学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="Spring" scheme="https://lptexas.top/tags/Spring/"/>
    
    <category term="AOP" scheme="https://lptexas.top/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Java之SpringBoot数据库API Part2</title>
    <link href="https://lptexas.top/posts/1059130365/"/>
    <id>https://lptexas.top/posts/1059130365/</id>
    <published>2023-03-10T16:00:00.000Z</published>
    <updated>2024-10-04T09:01:24.837Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://lptexas-cub.github.io/posts/2953060011/">接上一节，SpringBoot数据库API</a></p></blockquote><h1 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h1><blockquote><p>TestTransController.java</p></blockquote><ul><li>事务，要么完全执行，要么完全不执行。</li><li>添加<code>@Transactional</code>注解，表明操作为事务。</li></ul><p>当不加注解运行时，第一条记录会被添加至表中，但第二条记录会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysqlapi.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.mysqlapi.repository.UserRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.transaction.Transactional;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTransController</span> &#123;</span><br><span class="line"><span class="comment">//实例化接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserRepository repository;</span><br><span class="line"><span class="comment">//注意：数据库要改为InnoDB引擎</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/create2Users&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create2Users</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user1.setUserName(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    user1.setRole(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    repository.save(user1);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user1.setUserName(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    user2.setRole(<span class="string">&quot;10&quot;</span>); <span class="comment">//此操作会报错</span></span><br><span class="line">    repository.save(user2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><blockquote><p>对软件最小可测试单元（Java，即类）进行测试。</p></blockquote><h2 id="添加依赖工具"><a href="#添加依赖工具" class="headerlink" title="添加依赖工具"></a>添加依赖工具</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span></span><br><span class="line">junit</span><br><span class="line"><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="进入单元测试"><a href="#进入单元测试" class="headerlink" title="进入单元测试"></a>进入单元测试</h2><blockquote><p><a href="https://blog.csdn.net/qq_44309044/article/details/102687627">eclipse进入单元测试</a></p></blockquote><p>在我们写好一个类时，我们可以使用单元测试对里面的方法进行测试。</p><p>可以借助<code>junit</code>中的<code>Assert</code>类，提供的方法。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230311093458113.png" alt="image-20230311093458113"></p><blockquote><p>执行单元测试类</p></blockquote><p>在<code>class &lt;classname&gt; &#123;&#125;</code>前添加注解</p><ul><li>@RunWith(SpringRunner.<strong>class</strong>)</li><li>@SpringBootTest</li></ul><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><p>不同的用户拥有不同的角色，不同角色的权限不同，可以执行的操作也不一样。如何在SpringBoot中实现对权限的控制呢？</p><p>实现简单的权限管理，我们可以使用cookie、session、线程存储、数据库等。</p><h2 id="示例：线程本地存储"><a href="#示例：线程本地存储" class="headerlink" title="示例：线程本地存储"></a>示例：线程本地存储</h2><blockquote><p>CurrentUserHolder.java</p></blockquote><p>这个类创建了两个方法：</p><ol><li>get()，用户获取线程存储中的数据</li><li>set()，设置线程存储中的数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.holder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CurrentUserHolder</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; holder = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> holder.get()==<span class="literal">null</span>?<span class="string">&quot;null&quot;</span>:holder.get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String username)</span> &#123;</span><br><span class="line">holder.set(username);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">ThreadLocal相关问题</p><p><a href="https://www.zhihu.com/question/477411483">ThreadLocal一个线程只能存放一个变量吗？想存多个怎么搞？</a></p></div><blockquote><p>CheckUserService.java</p></blockquote><p>service层</p><ul><li>进行身份的检查，若不匹配则抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysqlapi.holder.CurrentUserHolder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckUserService</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">String user=CurrentUserHolder.get();</span><br><span class="line"><span class="keyword">if</span>(!user.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;[异常]你不是管理员&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserService.java</p></blockquote><p>service层</p><ul><li>实例化CheckUserService</li><li>在每个UserService的方法中（以<code>findAll()</code>为例），加入CheckUserService检查（调用<code>check()</code>方法），设置抛出异常（<code>throws Exception</code>）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CheckUserService checkUserService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">checkUserService.check();</span><br><span class="line">System.out.println(<span class="string">&quot;查找成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="admonition info"><p>使用这种方法进行权限管理，我们会发现在<code>UserService.java</code>中，每有一个方法需要权限都要添加<code>check()</code>和<code>throws Exception</code>这样使得我们的代码显得冗余、低效。如何解决呢？这就需要我们学习<code>AOP面向切面编程</code>。在下一节将进行学习。</p></div><br>]]></content>
    
    
    <summary type="html">自用的学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://lptexas.top/tags/SpringBoot/"/>
    
    <category term="Mysql" scheme="https://lptexas.top/tags/Mysql/"/>
    
    <category term="Restful API" scheme="https://lptexas.top/tags/Restful-API/"/>
    
  </entry>
  
  <entry>
    <title>Java之SpringBoot数据库API</title>
    <link href="https://lptexas.top/posts/2953060011/"/>
    <id>https://lptexas.top/posts/2953060011/</id>
    <published>2023-03-09T16:00:00.000Z</published>
    <updated>2024-10-04T09:01:32.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://lptexas.top/posts/581298918/">接上一节，SpringBoot连接数据库。</a></p></blockquote><p>设计操作数据库的API，让数据库操作更加便捷。</p><h1 id="设计Restful-API"><a href="#设计Restful-API" class="headerlink" title="设计Restful API"></a>设计Restful API</h1><table><thead><tr><th>请求方式</th><th>路径</th><th>功能</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;users</td><td>获取所有用户信息</td></tr><tr><td>GET</td><td>&#x2F;users&#x2F;{id}</td><td>查询单条记录</td></tr><tr><td>POST</td><td>&#x2F;adduser</td><td>创建一条用户记录</td></tr><tr><td>PUT</td><td>&#x2F;users&#x2F;{id}</td><td>更新单条记录</td></tr></tbody></table><h1 id="创建数据库接口"><a href="#创建数据库接口" class="headerlink" title="创建数据库接口"></a>创建数据库接口</h1><blockquote><p>UserRepository.java</p></blockquote><ul><li>继承<code>JpaRepository接口</code></li><li>可以自定义一些方法。此处我选择直接使用继承的方法，就不写其它东西了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JpaRepository接口类"><a href="#JpaRepository接口类" class="headerlink" title="JpaRepository接口类"></a>JpaRepository接口类</h2><blockquote><p>这个接口又继承了<code>ListCrudRepository&lt;T, ID&gt;</code>和<code>ListPagingAndSortingRepository&lt;T, ID&gt;</code></p></blockquote><p>这些接口为我们封装了很多方法。具体请创建之后，点进去查看。</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230310192452411.png" alt="image-20230310192452411"></p><p><img src="https://lptexas-cub.github.io/img/post/image-20230310192534454.png" alt="image-20230310192534454"></p><p><img src="https://lptexas-cub.github.io/img/post/image-20230310192606010.png" alt="image-20230310192606010"></p><p><img src="https://lptexas-cub.github.io/img/post/image-20230310192546820.png" alt="image-20230310192546820"></p><p><img src="https://lptexas-cub.github.io/img/post/image-20230310192728513.png" alt="image-20230310192728513"></p><p><img src="https://lptexas-cub.github.io/img/post/image-20230310192652324.png" alt="image-20230310192652324"></p><h1 id="完善Controller"><a href="#完善Controller" class="headerlink" title="完善Controller"></a>完善Controller</h1><blockquote><p>UserController.java</p><p>+查询记录</p><p>+增加记录</p><p>+删除记录</p><p>+更改记录</p></blockquote><ul><li>初始化接口</li><li>添加注解<code>@Autowired</code></li><li>添加<code>@GetMapping、@PostMapping</code>等，实现对应的接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有记录</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> repository.findAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询单条记录</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> repository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条记录</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/adduser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestParam(&quot;usrn&quot;)</span> String usrn, <span class="meta">@RequestParam(&quot;pswd&quot;)</span> String pswd, <span class="meta">@RequestParam(&quot;role&quot;)</span> String role)</span> &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setUserName(usrn);</span><br><span class="line">user.setPassword(pswd);</span><br><span class="line">user.setRole(role);</span><br><span class="line"><span class="keyword">return</span> repository.save(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改一条记录</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/users/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer PathId, <span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id, <span class="meta">@RequestParam(&quot;usrn&quot;)</span> String usrn, <span class="meta">@RequestParam(&quot;pswd&quot;)</span> String pswd, <span class="meta">@RequestParam(&quot;role&quot;)</span> String role)</span> &#123;</span><br><span class="line">Optional&lt;User&gt; optional = repository.findById(id);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="comment">// 是否存在该用户，不存在则返回null</span></span><br><span class="line"><span class="comment">// 方法一（推荐）</span></span><br><span class="line">optional.orElse(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//// 方法二</span></span><br><span class="line"><span class="comment">//if(optional.isPresent()) &#123;</span></span><br><span class="line"><span class="comment">//user=optional.get();</span></span><br><span class="line"><span class="comment">//&#125;else &#123;</span></span><br><span class="line"><span class="comment">//return null;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">if</span> (id.toString()!= <span class="literal">null</span>&amp;&amp;id.toString()!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">user.setId(id);</span><br><span class="line">&#125; &#123;</span><br><span class="line">user.setId(optional.get().getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (usrn != <span class="literal">null</span>&amp;&amp; usrn!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">user.setUserName(usrn);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">user.setUserName(optional.get().getUserName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pswd != <span class="literal">null</span>&amp;&amp; pswd!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">user.setPassword(pswd);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">user.setPassword((optional.get().getPassword()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (role != <span class="literal">null</span>&amp;&amp; role!=<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">user.setRole(role);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">user.setRole(optional.get().getRole());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> repository.save(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">如果在这一步结束，能成功运行吗？</p><p>答案是报错<code>java.lang.IllegalArgumentException: Could not resolve domain type of interface com.mysqlapi.UserRepository</code>，为什么呢？原因是继承<code>jpaRepository</code>时未指定两个类型，即<code>&lt;对应实体类,主键的数据类型&gt;</code></p></div><blockquote><p>修改UserRepository.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User,Integer&gt;&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="执行程序"><a href="#执行程序" class="headerlink" title="执行程序"></a>执行程序</h1><blockquote><p>run as spring boot app</p></blockquote><p>当前的程序还是存在问题，使用PUT更新记录时，当<code>id</code>为<code>空（非null）</code>时，会报错；当<code>某个参数</code>为<code>null</code>时，仍然报错（似乎<code>!=null</code>语句未生效）。思考为什么会发生这种问题？如何解决？</p><div class="admonition note"><p class="admonition-title">数据库中`<tablename>_sequence`表的作用</p><p>该表指定了下一个记录的自增值。用<code>next_val</code>字段表示。如果使用接口插入数据失败，有可能是这里出错，日志中会报错<code>Duplicate entry 'xxx' for key 'xxx.PRIMARY'</code>。只需要修改一下自增值即可。</p></div><h1 id="处理数据库乱码问题"><a href="#处理数据库乱码问题" class="headerlink" title="处理数据库乱码问题"></a>处理数据库乱码问题</h1><blockquote><p>统一项目和数据库中使用的编码。</p></blockquote><h2 id="数据库连接时设置编码"><a href="#数据库连接时设置编码" class="headerlink" title="数据库连接时设置编码"></a>数据库连接时设置编码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/managerSys?useUnicode=true&amp;characterEncoding=utf8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">自用的学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://lptexas.top/tags/SpringBoot/"/>
    
    <category term="Mysql" scheme="https://lptexas.top/tags/Mysql/"/>
    
    <category term="Restful API" scheme="https://lptexas.top/tags/Restful-API/"/>
    
  </entry>
  
  <entry>
    <title>Java之SpringBoot连接数据库</title>
    <link href="https://lptexas.top/posts/581298918/"/>
    <id>https://lptexas.top/posts/581298918/</id>
    <published>2023-03-09T16:00:00.000Z</published>
    <updated>2024-10-04T09:01:15.617Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Hibernate</li><li>SpringBoot</li></ul><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><ol><li>jpa用于连接增删改数据库的</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>mysql连接驱动</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我使用下面这个驱动会报错 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h1><blockquote><p>修改<code>application.properties</code>或同目录新建<code>application.yml</code></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.31.5:3306/managerSys</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jc.jdbc.Driver</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">driver-class-name</p><p><a href="https://blog.csdn.net/a907691592/article/details/96876030">com.mysql.jdbc.Driver和com.mysql.jc.jdbc.Drive的区别</a></p></div><blockquote><p>建议添加的配置</p><p>hibernate是一种对象关系映射框架，hibernate可以实现自动建表。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jpa:</span> </span><br><span class="line">   <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">hibernate:</span> </span><br><span class="line">        <span class="attr">ddl-auto:</span> <span class="string">create</span></span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">hibernate的5个模式</p><p>见下文。</p></div><h1 id="hibernate的5个模式"><a href="#hibernate的5个模式" class="headerlink" title="hibernate的5个模式"></a><a href="https://blog.csdn.net/qq_28681387/article/details/97614983">hibernate的5个模式</a></h1><blockquote><p>DDL（Data Definition Language），即数据定义语言，例如建数据库、建表等，都属于数据定义语言。</p></blockquote><h2 id="create模式"><a href="#create模式" class="headerlink" title="create模式"></a>create模式</h2><p>每次运行项目，没有表会新建表，如果表内有数据会被清空</p><h2 id="create-drop模式"><a href="#create-drop模式" class="headerlink" title="create-drop模式"></a>create-drop模式</h2><p>每次运行项目，没有表会新建表，并且每次程序结束后，删除表。</p><h2 id="update模式"><a href="#update模式" class="headerlink" title="update模式"></a>update模式</h2><p>没有表格会新建，不会删除数据，只会对表进行更新操作。</p><h2 id="validate模式"><a href="#validate模式" class="headerlink" title="validate模式"></a>validate模式</h2><p>校验模式，校验字段数据类型是否相同，不同则报错。</p><h2 id="none模式"><a href="#none模式" class="headerlink" title="none模式"></a>none模式</h2><p>关闭ddl，什么都不做，每次启动项目，不会对数据库进行任何验证和操作。</p><h1 id="演示Hibernate自动建表"><a href="#演示Hibernate自动建表" class="headerlink" title="演示Hibernate自动建表"></a>演示Hibernate自动建表</h1><h2 id="新建Entity"><a href="#新建Entity" class="headerlink" title="新建Entity"></a>新建Entity</h2><blockquote><p>User.java</p></blockquote><ul><li>定义成员变量</li><li>@id，设置变量对应为主键</li><li>@GeneratedValue，设置变量为自增</li><li>一键生成getter、setter方法，以及一个无参的构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123; <span class="comment">//构造函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新建Controller"><a href="#新建Controller" class="headerlink" title="新建Controller"></a>新建Controller</h2><blockquote><p>StudentController.java</p></blockquote><ul><li>暂时啥也不写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysqlapi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><blockquote><p>run  as spring boot app</p></blockquote><p>日志中可以观察到，<code>show-sql: true</code>正常工作。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Hibernate: <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> <span class="keyword">user</span></span><br><span class="line">Hibernate: <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> user_seq</span><br><span class="line">Hibernate: <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (id <span class="type">integer</span> <span class="keyword">not</span> <span class="keyword">null</span>, password <span class="type">varchar</span>(<span class="number">255</span>), role <span class="type">varchar</span>(<span class="number">255</span>), user_name <span class="type">varchar</span>(<span class="number">255</span>), <span class="keyword">primary</span> key (id)) engine<span class="operator">=</span>InnoDB</span><br><span class="line">Hibernate: <span class="keyword">create</span> <span class="keyword">table</span> user_seq (next_val <span class="type">bigint</span>) engine<span class="operator">=</span>InnoDB</span><br><span class="line">Hibernate: <span class="keyword">insert</span> <span class="keyword">into</span> user_seq <span class="keyword">values</span> ( <span class="number">1</span> )</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>查看数据库，可以发现已经成功创建！</p><p><img src="https://lptexas-cub.github.io/img/post/image-20230310184516354.png" alt="image-20230310184516354"></p><div class="admonition caution"><p class="admonition-title">ddl-auto使用注意</p><p>一般情况下，<code>ddl-auto</code>使用<code>update</code>模式最安全。</p></div><br>]]></content>
    
    
    <summary type="html">自用的学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://lptexas.top/tags/SpringBoot/"/>
    
    <category term="Mysql" scheme="https://lptexas.top/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java之ArrayList动态数组</title>
    <link href="https://lptexas.top/posts/862504134/"/>
    <id>https://lptexas.top/posts/862504134/</id>
    <published>2023-03-07T16:00:00.000Z</published>
    <updated>2024-10-04T08:17:21.184Z</updated>
    
    <content type="html"><![CDATA[<p>参阅：<a href="https://www.runoob.com/java/java-arraylist.html">https://www.runoob.com/java/java-arraylist.html</a></p><h1 id="什么是ArrayList"><a href="#什么是ArrayList" class="headerlink" title="什么是ArrayList?"></a>什么是ArrayList?</h1><blockquote><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><p>ArrayList 继承了 AbstractList ，并实现了 List 接口。</p></blockquote><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// 引入 ArrayList 类</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;E&gt; objectName =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();　 <span class="comment">// 初始化</span></span><br></pre></td></tr></table></figure><h1 id="ArrayList提供的方法"><a href="#ArrayList提供的方法" class="headerlink" title="ArrayList提供的方法"></a>ArrayList提供的方法</h1><h2 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h2><blockquote><p>添加元素至数组中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList; <span class="comment">// 引入 ArrayList 类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArrayList</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; animals =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">// 初始化</span></span><br><span class="line">animals.add(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">animals.add(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">System.out.println(animals);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#output</span><br><span class="line">[dog, cat]</span><br></pre></td></tr></table></figure><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><blockquote><p>访问元素。</p><p>注意：列表中的索引从0开始。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.get(index);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(animals.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><blockquote><p>修改元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.set(index,value);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animals.set(<span class="number">0</span>,<span class="string">&quot;monkey&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><blockquote><p>删除元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.remove(index);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animals.remove(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="size方法"><a href="#size方法" class="headerlink" title="size方法"></a>size方法</h2><blockquote><p>输出元素个数。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.size();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(animals.size());</span><br></pre></td></tr></table></figure><h1 id="遍历数组列表中的元素的技巧"><a href="#遍历数组列表中的元素的技巧" class="headerlink" title="遍历数组列表中的元素的技巧"></a>遍历数组列表中的元素的技巧</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(int i : myNumbers)</span></span></span><br></pre></td></tr></table></figure><p>等价于:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; myNumbers.size(); i++）&#123;</span></span><br><span class="line">    int j <span class="operator">=</span> myNumbers.get(i)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">自用的学习笔记。</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://lptexas.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python之matplotlib模块</title>
    <link href="https://lptexas.top/posts/2723459680/"/>
    <id>https://lptexas.top/posts/2723459680/</id>
    <published>2023-03-07T16:00:00.000Z</published>
    <updated>2024-02-18T02:59:54.120Z</updated>
    
    <content type="html"><![CDATA[<p>参阅：<a href="http://c.biancheng.net/matplotlib">http://c.biancheng.net/matplotlib</a></p><h1 id="使用matplotlib绘制可视化图形"><a href="#使用matplotlib绘制可视化图形" class="headerlink" title="使用matplotlib绘制可视化图形"></a>使用matplotlib绘制可视化图形</h1><h1 id="正确显示中文"><a href="#正确显示中文" class="headerlink" title="正确显示中文"></a>正确显示中文</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt<span class="selector-class">.rcParams</span><span class="selector-attr">[<span class="string">&#x27;font.sans-serif&#x27;</span>]</span>=<span class="selector-attr">[<span class="string">&#x27;SimHei&#x27;</span>]</span>#正确显示汉字</span><br><span class="line">plt<span class="selector-class">.rcParams</span><span class="selector-attr">[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]</span>=False #正确显示负号</span><br></pre></td></tr></table></figure><h1 id="axes类"><a href="#axes类" class="headerlink" title="axes类"></a>axes类</h1><h2 id="legend函数"><a href="#legend函数" class="headerlink" title="legend函数"></a>legend函数</h2><blockquote><p>创建图例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax.legend(handles, labels, loc)</span><br></pre></td></tr></table></figure><ul><li>labels 是一个字符串序列，用来指定标签的名称；</li><li>loc 是指定图例位置的参数，其参数值可以用字符串或整数来表示；</li><li>handles 参数，它也是一个序列，它包含了所有线型的实例；</li><li><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.legend.html">更多参数</a>（frameon,ncol等等）</li></ul><h1 id="报错解决方案"><a href="#报错解决方案" class="headerlink" title="报错解决方案"></a>报错解决方案</h1><blockquote><p><a href="https://blog.csdn.net/Crazy__1/article/details/103903962">This application failed to start because it could not find or load the Qt platform plugin “windows”<br>in “”.<br>Reinstalling the application may fix this problem.</a><br>将D:\python36\Library\plugins目录下的platform文件夹复制到D:\python36下。D:\python36是<a href="https://so.csdn.net/so/search?q=anaconda&spm=1001.2101.3001.7020">anaconda</a>安装目录。</p></blockquote>]]></content>
    
    
    <summary type="html">Python学习笔记</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://lptexas.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python之pandas模块</title>
    <link href="https://lptexas.top/posts/2301760283/"/>
    <id>https://lptexas.top/posts/2301760283/</id>
    <published>2023-03-07T16:00:00.000Z</published>
    <updated>2024-10-04T09:00:20.273Z</updated>
    
    <content type="html"><![CDATA[<p>   Pandas 名字衍生自术语 “panel data”（面板数据）和 “Python data analysis”，一 个强大的分析结构化数据的工具集，基础是 Numpy，可以从各种文件格式比如 CSV、SQL、 Excel 导入数据，对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数 据加工特征。Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。Pandas 的主要 数据结构是 Series （一维数据）与 DataFrame（二维数据）</p><h1 id="Series对象"><a href="#Series对象" class="headerlink" title="Series对象"></a>Series对象</h1><blockquote><p>Series 是一个一维数据，Pandas 会默认用 0 到 n-1 来作为 Series 的 index, 但也可以自己 指定 index（可以把 index 理解为 dict 里面的 key）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.Series( data, index, dtype, name, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray 类型)。</li><li><strong>index</strong>：数据索引标签，如果不指定，默认从 0 开始。</li><li><strong>dtype</strong>：数据类型，默认会自己判断。</li><li><strong>name</strong>：设置名称。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><p><img src="https://lptexas-cub.github.io/img/post/pandas-series.jpg"></p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h2 id="data为字典"><a href="#data为字典" class="headerlink" title="data为字典"></a>data为字典</h2><blockquote><p>默认根据字典的键码字符串顺序排序，也可以设定顺序。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&quot;ton&quot;</span>: <span class="number">20</span>, <span class="string">&quot;mary&quot;</span>: <span class="number">18</span>, <span class="string">&quot;jack&quot;</span>: <span class="number">19</span>, <span class="string">&quot;car&quot;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">sa = pd.Series(s)</span><br><span class="line"><span class="built_in">print</span>(sa)  <span class="comment"># 默认根据字典的键码字符串顺序排序</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">car      NaN</span></span><br><span class="line"><span class="string">jack    19.0</span></span><br><span class="line"><span class="string">mary    18.0</span></span><br><span class="line"><span class="string">ton     20.0</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">## 指定顺序</span></span><br><span class="line">sa = pd.Series(s, index=[<span class="string">&#x27;ton&#x27;</span>, <span class="string">&#x27;mary&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;car&#x27;</span>]) <span class="comment">#指定顺序&#x27;ton&#x27;, &#x27;mary&#x27;, &#x27;jack&#x27;, &#x27;car&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(sa)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ton     20.0</span></span><br><span class="line"><span class="string">mary    18.0</span></span><br><span class="line"><span class="string">jack    19.0</span></span><br><span class="line"><span class="string">car      NaN</span></span><br><span class="line"><span class="string">dtype: float64</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Pandas数据框（DataFrame）"><a href="#Pandas数据框（DataFrame）" class="headerlink" title="Pandas数据框（DataFrame）"></a>Pandas数据框（DataFrame）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.DataFrame( data, index, columns, dtype, copy)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>data</strong>：一组数据(ndarray、series, map, lists, dict 等类型)。</li><li><strong>index</strong>：索引值，或者可以称为行标签。</li><li><strong>columns</strong>：列标签，默认为 RangeIndex (0, 1, 2, …, n) 。</li><li><strong>dtype</strong>：数据类型。</li><li><strong>copy</strong>：拷贝数据，默认为 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Pandas数据框</span></span><br><span class="line">data = &#123;<span class="string">&#x27;id&#x27;</span>: [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Mike&#x27;</span>],</span><br><span class="line"> <span class="string">&#x27;age&#x27;</span>: [<span class="number">18</span>, <span class="number">35</span>, <span class="number">20</span>],</span><br><span class="line"> <span class="string">&#x27;cash&#x27;</span>: [<span class="number">10.53</span>, <span class="number">500.7</span>, <span class="number">13.6</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data) <span class="comment">#调用构造函数并将结果赋值给 df</span></span><br><span class="line"><span class="built_in">print</span>(df) <span class="comment"># 默认根据字典的键码字符串顺序排序</span></span><br><span class="line"><span class="comment">## 指定顺序</span></span><br><span class="line">df = pd.DataFrame(data,index=[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;cash&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h3 id="对-DataFrame-对象增加列"><a href="#对-DataFrame-对象增加列" class="headerlink" title="对 DataFrame 对象增加列"></a>对 DataFrame 对象增加列</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df[&quot;rich&quot;]=df[&quot;cash&quot;]&gt;200</span><br><span class="line">print(df)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">      age    cash     id   rich</span><br><span class="line">id     18   10.53   Jack  False</span><br><span class="line">age    35  500.70  Sarah   True</span><br><span class="line">cash   20   13.60   Mike  False</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 指定列的顺序</span></span><br><span class="line"><span class="attribute">df2</span>=pd.DataFrame(data,columns=[<span class="string">&quot;id&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;cash&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><h2 id="数据框索引"><a href="#数据框索引" class="headerlink" title="数据框索引"></a><a href="https://blog.csdn.net/qq_41913559/article/details/107561309">数据框索引</a></h2><p>①iloc 主要使用数字来索引数据，而不能使用字符型的标签来索引数据。而 loc 则刚好 相反，只能使用字符型标签来索引数据，不能使用数字来索引数据。注意：数字索引范围不 包括结尾，而字符索引范围包括结尾。</p><p>②ix 是一种混合索引，字符型标签和整型数据索引都可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 数据引用</span></span><br><span class="line"><span class="comment">### 引用列、切片、定位某个数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2[<span class="string">&quot;id&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df2.iloc[<span class="number">0</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="number">2</span>]) <span class="comment"># 逗号左侧为行，右侧为列</span></span><br><span class="line"><span class="built_in">print</span>(df2.iloc[:])</span><br></pre></td></tr></table></figure><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h2 id="删除空值的行-x2F-列"><a href="#删除空值的行-x2F-列" class="headerlink" title="删除空值的行&#x2F;列"></a><a href="https://blog.csdn.net/qq_17753903/article/details/89817371">删除空值的行&#x2F;列</a></h2><blockquote><p>语法格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.dropna(axis=<span class="number">0</span>, how=<span class="string">&#x27;any&#x27;</span>, thresh=<span class="literal">None</span>, subset=<span class="literal">None</span>, inplace=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><blockquote><p>参数详解</p></blockquote><ul><li><p>axis：轴。0或’index’，表示按行删除；1或’columns’，表示按列删除。</p></li><li><p>how：筛选方式。‘any’，表示该行&#x2F;列只要有一个以上的空值，就删除该行&#x2F;列；‘all’，表示该行&#x2F;列全部都为空值，就删除该行&#x2F;列。</p></li><li><p>thresh：非空元素最低数量。int型，默认为None。如果该行&#x2F;列中，非空元素数量小于这个值，就删除该行&#x2F;列。</p></li><li><p>subset：子集。列表，元素为行或者列的索引。如果axis&#x3D;0或者‘index’，subset中元素为列的索引；如果axis&#x3D;1或者‘column’，subset中元素为行的索引。由subset限制的子区域，是判断是否删除该行&#x2F;列的条件判断区域。</p></li><li><p>inplace：是否原地替换。布尔值，默认为False。如果为True，则在原DataFrame上进行操作，返回值为None。</p></li></ul><blockquote><p>案例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;titanic.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head().to_string())</span><br><span class="line"><span class="comment"># print(df.describe().to_string())</span></span><br><span class="line"><span class="comment"># print(df.describe(include=&#x27;all&#x27;).to_string())</span></span><br><span class="line"><span class="comment">## 删除空值的行</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;age&#x27;</span>].isnull())</span><br><span class="line">new_df=df.dropna(subset=[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(new_df.describe().to_string())</span><br><span class="line"><span class="built_in">print</span>(new_df[<span class="string">&#x27;age&#x27;</span>].isnull().head())</span><br></pre></td></tr></table></figure><h3 id="填充空值"><a href="#填充空值" class="headerlink" title="填充空值"></a>填充空值</h3><blockquote><p>语法结构</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.fillna(value=<span class="literal">None</span>, method=<span class="literal">None</span>, axis=<span class="literal">None</span>, inplace=<span class="literal">False</span>, limit=<span class="literal">None</span>, downcast=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><blockquote><p>参数详解</p></blockquote><ul><li>value: 变量、字典、Series，DataFrame；用于填充填充缺失值，或指定为每个索引（对于Series）或列（对于DataFrame）的缺失值使用字典&#x2F;Series&#x2F;DataFrame的值填充</li><li>method: {‘backfill’, ‘bfill’, ‘pad’, ‘ffill’, None}, 默认None， pad&#x2F;ffill表示向后填充空值，backfill&#x2F;bfill表示向前填充空值</li><li>axis: {0 or ‘index’, 1 or ‘columns’}</li><li>inplace: boolean, 默认为False。若为True， 在原地填满</li><li>limit: int, 默认为None， 如果指定了方法， 则这是连续的NaN值的前向&#x2F;后向填充的最大数量</li><li>downcast: dict, 默认None， 字典中的项为类型向下转换规则。</li></ul><blockquote><p>案例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">round</span>(df[<span class="string">&#x27;age&#x27;</span>].mean(),<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].fillna(x,inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head().to_string())</span><br></pre></td></tr></table></figure><h3 id="转换列的日期格式"><a href="#转换列的日期格式" class="headerlink" title="转换列的日期格式"></a><a href="https://www.delftstack.com/zh/howto/python-pandas/how-to-convert-dataframe-column-to-datetime-in-pandas/#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8%20Pandas%20%E4%B8%AD%E5%B0%86%20DataFrame%20%E5%88%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%201%20Pandas%20to_datetime,%E6%96%B9%E6%B3%95%E5%B0%86%20DataFrame%20%E5%88%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%20Datetime%203%20%E5%B0%86%20DataFrame%20%E5%88%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%96%B9%E6%B3%95%E7%9A%84%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83">转换列的日期格式</a></h3><blockquote><p>语法格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pandas.to_datetime(param, <span class="built_in">format</span>=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">参数详解</p><p><a href="https://blog.csdn.net/qq_39290225/article/details/98313743">to_datetime的参数详解</a></p></div><blockquote><p>案例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 处理日期(字符转换为日期)</span></span><br><span class="line">data=&#123;</span><br><span class="line">  <span class="string">&#x27;Date&#x27;</span>:[<span class="string">&#x27;2023/3/1&#x27;</span>,<span class="string">&#x27;2022/1/1&#x27;</span>],</span><br><span class="line">   <span class="string">&#x27;age&#x27;</span>:[<span class="number">50</span>,<span class="number">10</span>]</span><br><span class="line">&#125;</span><br><span class="line">df=pd.DataFrame(data,index=[<span class="string">&#x27;day1&#x27;</span>,<span class="string">&#x27;day2&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df[<span class="string">&#x27;Date&#x27;</span>]=pd.to_datetime(df[<span class="string">&#x27;Date&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h2 id="删除空行后重置索引"><a href="#删除空行后重置索引" class="headerlink" title="删除空行后重置索引"></a><a href="https://cloud.tencent.com/developer/article/2230126#:~:text=%E3%80%90%E6%8A%80%E5%B7%A7%E3%80%91Pandas%E4%BD%BF%E7%94%A8drop%E5%90%8E%E4%BD%BF%E7%94%A8reset_index%E9%87%8D%E7%BD%AE%E7%B4%A2%E6%80%A7%20%E6%88%91%E4%BB%AC%E5%9C%A8%E4%BD%BF%E7%94%A8%20drop,%E5%87%BD%E6%95%B0%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E5%80%BC%E7%9A%84%E8%A1%8C%E5%90%8E%EF%BC%8C%20%E5%8E%9F%E6%9D%A5%E7%9A%84%E7%B4%A2%E5%BC%95%E8%BF%98%E6%98%AF%E4%BF%9D%E7%95%99%E7%9A%84%20%EF%BC%81">删除空行后重置索引</a></h2><blockquote><p>reset_index()函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">箱线图Keyvalue:0报错</p><p>原因可能就是去除了空值，去除了index=0的元素，这个时候将索引重置就可以解决问题</p></div><h1 id="分组汇总"><a href="#分组汇总" class="headerlink" title="分组汇总"></a><a href="https://blog.csdn.net/FGH333xwy/article/details/110672407">分组汇总</a></h1><blockquote><p>groupby()核心用法总结</p></blockquote><ol><li>根据DataFrame本身的某一列或多列内容进行分组聚合:</li></ol><p>（a）若按某一列聚合，则新DataFrame将根据某一列的内容分为不同的维度进行拆解，同时将同一维度的再进行聚合，<br>（b）若按某多列聚合，则新DataFrame将是多列之间维度的笛卡尔积，即：新DataFrame具有一个层次化索引（由唯一的键对组成），例如：“key1”列，有a和b两个维度，而“key2”有one和two两个维度，则按“key1”列和“key2”聚合之后，新DataFrame将有四个group；<br>（c）通过调用get_group()函数可以返回一个按照分组得到的DataFrame对象，该对象是分组中的一种情况；<br>（d）可以将想要计算的列（可以是单列，也可以是多列）通过索引的方式取出来，然后在取出来这列数据的基础上进行汇总计算。eg：df.groupby(“状态”)[“区”]、df.groupby(“状态”)[[“区”,“省”]]</p><p>注意：groupby默认是在axis&#x3D;0上进行分组的，通过设置axis&#x3D;1，也可以在其他任何轴上进行分组。</p><ol start="2"><li>GroupBy对象结合描述统计方法从各个分组中产生标量值：</li></ol><p>（a）这个标量值可以是平均值、数量、中位数等。GroupBy对象常用的描述性统计方法如下表所示：</p><p><img src="https://lptexas-cub.github.io/img/post/groupby.png"></p><h2 id="普通过滤"><a href="#普通过滤" class="headerlink" title="普通过滤"></a>普通过滤</h2><h2 id="分组过滤"><a href="#分组过滤" class="headerlink" title="分组过滤"></a>分组过滤</h2>]]></content>
    
    
    <summary type="html">Python学习笔记</summary>
    
    
    
    <category term="计算机编程" scheme="https://lptexas.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://lptexas.top/tags/Python/"/>
    
  </entry>
  
</feed>
